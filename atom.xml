<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DMoon&#39;s Laputa</title>
  <subtitle>Run like your life depends on it.</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://kyoyadmoon.github.io/blog/"/>
  <updated>2016-03-23T08:33:42.000Z</updated>
  <id>http://kyoyadmoon.github.io/blog/</id>
  
  <author>
    <name>DMoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESLint React 心得 - extends Airbnb config</title>
    <link href="http://kyoyadmoon.github.io/blog/2016/03/23/ESLint-React-%E5%BF%83%E5%BE%97/"/>
    <id>http://kyoyadmoon.github.io/blog/2016/03/23/ESLint-React-心得/</id>
    <published>2016-03-23T04:54:43.000Z</published>
    <updated>2016-03-23T08:33:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/J_zhmNsFt-oz38WoPg-bJkojjA3bKvsJaU81PxDuTn2QeR934HoMKzk_RbNjIBmN2ZwgnDL3m99nKa7AzbqkV1ddjcMlPA2wfFKnfKFuoitT7X1DWsu07pXsvv6XkV4PvcG6F9nlGHTTLHmTwtx4fVWdXNEhMoRBXf3KbrfaFhxwhXtxxKNcCqbCZauemoBsNY8J4inI_JDzZiiUyQIASEhdFcexrL9DmeNH5_zTXea0yQmXJcnYulVCgmYjJN-aEMbBAJkA8P_G-6Izm53Zikw86lzlVughJxqjau_hp7-BDDjkB7fjPYN5PA4XazhVzQkLlFYGQX5l8hLbSlCzoeg8nIDpW3F8-16bCtxORmPWhCtnOlwYAmm-Ue2waRvoHW8CjaFCu3kNi0SIbP8wQ8WceNIWr9CR2wsMCqNzSLr6ZJQZWxs9njjqtTR39pSgjSEmHf_jWnbNIsTOVl91JLMTdxsAE487wXPkOCk5Hmrg1VU85PQAcsvt7JiJ4XmXoGewtdqg8Cu4-LIQzdTia01Yor--4yfpg9HfAWg-xmNsHWjZ9QDNyvctMRJ_culEfnYi=w1237-h320-no&quot; alt=&quot;ESLint&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前一直沒有嘗試過 JSHint、ESLint ，但隨著合作開發的人數越來越多，程式碼的風格和規範問題就更加明顯，加上最近看了神作 &lt;code&gt;Clean Code&lt;/code&gt; ，覺得寫出乾淨的程式碼真的很重要，剛好爬文發現有人推薦 Airbnb 釋出的 ESLint config 來做 js 和 React.js 規範，所以就決定來嘗試看看！&lt;/p&gt;
&lt;p&gt;首先我要推薦 &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eslint-plugin-react&lt;/a&gt; 這個套件，這套件除了規範 React 的一些寫法，重要的是他還有寫 rules 的文件，告訴你為什麼建議這樣寫，只要把 eslint 上出現的錯誤訊息，拿去 google 就會找到 github 上用 markdown 寫的相關說明，跟著寫就有種 Level Up 的感覺，實在受益匪淺！&lt;/p&gt;
&lt;p&gt;#Setup&lt;/p&gt;
&lt;p&gt;安裝方法很簡單&lt;/p&gt;
&lt;p&gt;先使用 npm 安裝 eslint 、 eslint-plugin-react、eslint-config-airbnb&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install --save-dev eslint eslint-plugin-react eslint-config-airbnb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安裝後可以利用指令 init  &lt;code&gt;.eslintrc.js&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;eslint —init&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;透過 .eslintrc.js 這個檔案可以編輯 eslint 的規則&lt;/p&gt;
&lt;p&gt;加入 extends airbnb 和 react plugin 就可以了&lt;/p&gt;
&lt;p&gt;因為我有使用 es6 語法 所以需要多一個 babel 當 parser&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* .eslintrc.js */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;extends&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;parser&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;babel-eslint&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;rules&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;strict&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/J_zhmNsFt-oz38WoPg-bJkojjA3bKvsJaU81PxDuTn2QeR934HoMKzk_RbNjIBmN2ZwgnDL3m99nKa7AzbqkV1ddjcMlP
    
    </summary>
    
      <category term="DevTools" scheme="http://kyoyadmoon.github.io/blog/categories/DevTools/"/>
    
    
      <category term="ESLint" scheme="http://kyoyadmoon.github.io/blog/tags/ESLint/"/>
    
      <category term="React.js" scheme="http://kyoyadmoon.github.io/blog/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>koa production cache 設定 - koa-static-cache</title>
    <link href="http://kyoyadmoon.github.io/blog/2016/03/19/koa-production-cache/"/>
    <id>http://kyoyadmoon.github.io/blog/2016/03/19/koa-production-cache/</id>
    <published>2016-03-19T02:07:46.000Z</published>
    <updated>2016-03-19T06:03:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/ehH3I28TQSBMOxkYzQ_Yp2Z9kXlDYbX-v22jH8BRXZ5bUC8PYpShgwBQP42-PKZ77vx0bn1eRsz3yrr_gIaEaKqeA_4Mt7WGd_YGXT3B40haq311NgEkP2K98NJMoj7J1-gwvEVbBPnyNO53PEFazJAZT6XMcYdnf_VNZ3NqVbPq3dgmgR8LMi2PIzdCqK0F_RWMedcl1RLfTbqxBugRbNcr38oiQ82yr5eZGAC2Chcni09MCtYdhHINoIzl-3cVh8M-K8rTpAAa3YwHwXrjUgTf4ZRVqC8aQnpr8RbCb2kboVZ6AbcVLwv1dz1LeCjo8pVEXEAqCBbxi4I3hUzfq-BpWJPmSRIqq55KPyKgXJeU90H-Aqkj0Yg0qe8zYEhd-vL_6nyqcpE7jT83VyLKStI6dsaA_LA72KqbvTuDRO8ABONlYOuQrG2Qsvxjm0A6d9qVRyCci1iD7q1c1ZhQ_xKfNgSXhnrZynFMoMaWhBSsdPVkbj7Jk_1nTnirxofc5nJOJphRMD2pwbBrSY4B-2uNhv0l0qpa5eI5LB6AvBjc4pPeXEq-ozZO06deNMj0tRUO=w1585-h712-no&quot; alt=&quot;Koa.js&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前在設定 Koa 的 cache 時，有點小卡關，所以記錄一下&lt;/p&gt;
&lt;p&gt;我使用的 Koa 版本是 2.0.0&lt;/p&gt;
&lt;p&gt;搭配處理 cache 的套件 是 &lt;a href=&quot;https://github.com/koajs/static-cache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa-static-cache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方 readme 上面的範例用法長這樣&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.use(staticCache(path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;public&#39;&lt;/span&gt;), &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  maxAge: &lt;span class=&quot;number&quot;&gt;365&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因為使用 Koa 2.0 的關係，需要 &lt;a href=&quot;https://github.com/koajs/convert&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa-convert&lt;/a&gt; 套件 convert 還沒更新支援 Koa 2.0 的套件，才能使用&lt;/p&gt;
&lt;p&gt;所以我改成這樣&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.use(convert(staticCache(path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;public&#39;&lt;/span&gt;), &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  maxAge: &lt;span class=&quot;number&quot;&gt;365&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不過卻沒成功&lt;/p&gt;
&lt;p&gt;後來看了別人的 Sample 才知道 StaticCache 後，還需要 &lt;a href=&quot;https://github.com/koajs/mount&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mount&lt;/a&gt; 到 route 上&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.use(convert(mount(&lt;span class=&quot;string&quot;&gt;&#39;/public/assets/js&#39;&lt;/span&gt;, staticCache(path.join(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;../public/assets/js/&#39;&lt;/span&gt;), &amp;#123;maxAge: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;&amp;#125;))));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後改成這樣終於成功啦！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/ehH3I28TQSBMOxkYzQ_Yp2Z9kXlDYbX-v22jH8BRXZ5bUC8PYpShgwBQP42-PKZ77vx0bn1eRsz3yrr_gIaEaKqeA_4Mt
    
    </summary>
    
      <category term="Node.js" scheme="http://kyoyadmoon.github.io/blog/categories/Node-js/"/>
    
    
      <category term="Koa" scheme="http://kyoyadmoon.github.io/blog/tags/Koa/"/>
    
      <category term="Production" scheme="http://kyoyadmoon.github.io/blog/tags/Production/"/>
    
  </entry>
  
  <entry>
    <title>GMT vs UTC 差異，Linux Etc/GMT 為何與現實時區相反</title>
    <link href="http://kyoyadmoon.github.io/blog/2016/03/08/GWT-vs-UTC-diff-and-Etc-GWT-reverse-timezone/"/>
    <id>http://kyoyadmoon.github.io/blog/2016/03/08/GWT-vs-UTC-diff-and-Etc-GWT-reverse-timezone/</id>
    <published>2016-03-08T13:22:03.000Z</published>
    <updated>2016-03-10T13:38:46.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;GMT__26amp_3B_UTC&quot;&gt;&lt;a href=&quot;#GMT__26amp_3B_UTC&quot; class=&quot;headerlink&quot; title=&quot;GMT &amp;amp; UTC&quot;&gt;&lt;/a&gt;GMT &amp;amp; UTC&lt;/h2&gt;&lt;p&gt;首先來說 GMT 和 UTC 是什麼，有什麼差別&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GMT：格林威治標準時間&lt;/p&gt;
&lt;p&gt;UTC：世界協調時間&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他們都是世界標準時間，而 UTC 的算法更為嚴謹，所以比 GMT 更為精準，不過兩者的差異是極小的，所以基本上時間是可以看作相同的&lt;/p&gt;
&lt;h2 id=&quot;Linux_Etc/GMT__u6642_u5340_u70BA_u4F55_u6B63_u8CA0_u985B_u5012&quot;&gt;&lt;a href=&quot;#Linux_Etc/GMT__u6642_u5340_u70BA_u4F55_u6B63_u8CA0_u985B_u5012&quot; class=&quot;headerlink&quot; title=&quot;Linux Etc/GMT 時區為何正負顛倒&quot;&gt;&lt;/a&gt;Linux Etc/GMT 時區為何正負顛倒&lt;/h2&gt;&lt;p&gt;當你使用 Linux 設定時區時 ，若是選用 Etc 底下的 GMT 時區，可能會發現設定的結果與你預想的不同，當你想設定台北的時區 （GMT＋8) ，但設定完後，系統時間卻是 -8 的時區，和台北時間相差 16 小時，原因是因為 Etc 底下的 GMT 時區是以 &lt;code&gt;格林威治&lt;/code&gt; 以西為正，以東為負，剛好與我們現實生活的認知相反&lt;/p&gt;
&lt;p&gt;而原因只是因為當初 Unix 多為西方人使用，便以西為正&lt;/p&gt;
&lt;p&gt;因此在設定的時候需要選擇正負相反的選項&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://lemonlatte.logdown.com/tags/tzdata&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lemonlatte.logdown.com/tags/tzdata&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GMT__26amp_3B_UTC&quot;&gt;&lt;a href=&quot;#GMT__26amp_3B_UTC&quot; class=&quot;headerlink&quot; title=&quot;GMT &amp;amp; UTC&quot;&gt;&lt;/a&gt;GMT &amp;amp; UTC&lt;/h2&gt;&lt;p&gt;首先來說 GMT 和 UTC 是什麼
    
    </summary>
    
      <category term="Linux" scheme="http://kyoyadmoon.github.io/blog/categories/Linux/"/>
    
    
      <category term="GMT" scheme="http://kyoyadmoon.github.io/blog/tags/GMT/"/>
    
      <category term="Linux" scheme="http://kyoyadmoon.github.io/blog/tags/Linux/"/>
    
      <category term="Timezone" scheme="http://kyoyadmoon.github.io/blog/tags/Timezone/"/>
    
  </entry>
  
  <entry>
    <title>Chromecast Audio 變身無線音響</title>
    <link href="http://kyoyadmoon.github.io/blog/2016/02/29/Chromecast-Audio/"/>
    <id>http://kyoyadmoon.github.io/blog/2016/02/29/Chromecast-Audio/</id>
    <published>2016-02-28T16:50:21.000Z</published>
    <updated>2016-03-08T17:39:07.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/7UgD5xli6K2rYKoprrlVPKU1w-OIZoiSJVR3CApp97IKGPtgGr952C6v29JWbIVEQelN3_enMvypP_pJkmGHwwEwql32tk_G8ARvt5SaNS9zrQUCyqXyyWhXyENCG9usX2o1jQLFTj6vYGSKYSrbN4beQ6ixiSS2qcIVR0v1Hw9v84GbEQAp5pW8tggzKYId-Lh4HFrdPthaOu9txYmOAcFQaDyD5IONCV1BBTuD9pSAHwMiThMzVTxCKWnBRl4HfEgmBE_U7ZT1cPzRhOaKjGHB0BWnqCIl8LuUkaXCS8GQ14gS68U3xay4SQBT60pne0sbpPQq5jQqZHeAZaJzSK4HjrVg5lxvgzjinCLBUbpdBbEw8qNYSsBXbg_y0BQvyCviLe785jQO7HT-GTb0up5B3hIWAxJACNfh2GmHhsdLy-g53oF9zD2bc_97GRh3VvJ1pJHWecwaXuulNa4przEf6lpVyBi4qXyhKBTBgJ4sqk0dpyyFOFlSqW1hXgLYcr0d8WSRMwlwuG-lyLHD1sIKkuBbEJh24Ek_ROOI-L6bJEBNn06KbJu57FwJxqfO4M8S=s1024-no&quot; alt=&quot;Chromecast Audio&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/chromecast/speakers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Chromecast Audio&lt;/strong&gt;&lt;/a&gt; 去年發表的時候就很想買了 沒想到台灣遲遲沒有開賣&lt;/p&gt;
&lt;p&gt;感謝好朋友幫我從美國帶回來，可以提前嘗鮮！&lt;/p&gt;
&lt;p&gt;總共有兩個接口&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;3.5mm 音源 output： 用來連接音響的&lt;/li&gt;
&lt;li&gt;micro USB：電源 （有附線材和充電器）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;u8A2D_u7F6E&quot;&gt;&lt;a href=&quot;#u8A2D_u7F6E&quot; class=&quot;headerlink&quot; title=&quot;設置&quot;&gt;&lt;/a&gt;設置&lt;/h1&gt;&lt;p&gt;安裝方法和 Chromecast 應該是一樣的&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用手機或平版到 App Store 搜尋下載官方的 Chromecast App ，打開後就可以開始設定裝置&lt;/li&gt;
&lt;li&gt;幫 Chromecast Audio 命名 （建議不要包含特殊字元或空白，純英數佳）&lt;/li&gt;
&lt;li&gt;填入家中 WiFi 帳號密碼 （讓Chromecast 能夠連上加中的 WiFi ， 之後就可以透過裝置連接家中 WiFi 來播放&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;u4F7F_u7528&quot;&gt;&lt;a href=&quot;#u4F7F_u7528&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;p&gt;Spotify 有支援能夠在 App 內選擇要在哪個裝置上播放，相信有用 Spotify 的人都知道，只要連接到 Chromecast Audio 的相同 Wifi 上，在播放裝置列表就能看見 Chromecast Audio 了&lt;/p&gt;
&lt;h1 id=&quot;Mac__26amp_3B_Windows__u6295_u653E&quot;&gt;&lt;a href=&quot;#Mac__26amp_3B_Windows__u6295_u653E&quot; class=&quot;headerlink&quot; title=&quot;Mac &amp;amp; Windows 投放&quot;&gt;&lt;/a&gt;Mac &amp;amp; Windows 投放&lt;/h1&gt;&lt;p&gt;當然只在手機上使用是絕對不夠方便的，如果用電腦到一半還要去操作手機就太 low 了，好在有廣大的開發者，提供了開源的桌面應用程式&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OS X: &lt;a href=&quot;https://github.com/andresgottlieb/soundcast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;soundcast github repo&lt;/a&gt;  如果 chromecast 名稱含有空白或特殊字元可能搜尋不到&lt;/li&gt;
&lt;li&gt;Windows: &lt;a href=&quot;https://github.com/acidhax/chromecast-audio-stream&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chromecast-audio-stream github repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;感恩開源，讚嘆開源&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/7UgD5xli6K2rYKoprrlVPKU1w-OIZoiSJVR3CApp97IKGPtgGr952C6v29JWbIVEQelN3_enMvypP_pJkmGHwwEwql32t
    
    </summary>
    
      <category term="科技產品" scheme="http://kyoyadmoon.github.io/blog/categories/%E7%A7%91%E6%8A%80%E7%94%A2%E5%93%81/"/>
    
    
      <category term="Chromecast" scheme="http://kyoyadmoon.github.io/blog/tags/Chromecast/"/>
    
  </entry>
  
  <entry>
    <title>Webpack ProvidePlugin : 不用再 import React 了</title>
    <link href="http://kyoyadmoon.github.io/blog/2016/02/23/free-to-import-react/"/>
    <id>http://kyoyadmoon.github.io/blog/2016/02/23/free-to-import-react/</id>
    <published>2016-02-22T16:35:32.000Z</published>
    <updated>2016-03-08T17:37:12.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;從前可能需要每個檔案都自己人工 import jquery、react&lt;/p&gt;
&lt;p&gt;現在透過 webpack 的 ProvidePlugin 可以幫你將 dependency 自動 import&lt;/p&gt;
&lt;p&gt;不只是 react , jquery  或其他 lib 都可以使用&lt;/p&gt;
&lt;h1 id=&quot;u4F7F_u7528_u65B9_u6CD5&quot;&gt;&lt;a href=&quot;#u4F7F_u7528_u65B9_u6CD5&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h1&gt;&lt;p&gt;把 ProvidePlugin 加到 webpack.config.js 的 plugins&lt;/p&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.ProvidePlugin(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;React&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          $: &lt;span class=&quot;string&quot;&gt;&quot;jquery&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原理是 webpack 在 build bundle.js 時，如果發現 &amp;#39;React&amp;#39; 、 $ ，就會自動去 import 設定中對應的 dependency&lt;/p&gt;
&lt;p&gt;例如 使用 React 時&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;React.createClass()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就會自動去 import react&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://webpack.github.io/docs/list-of-plugins.html#provideplugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@thejenniekim/never-import-react-from-react-again-thanks-to-webpack-s-provideplugin-69e7feb69e#.o6x19nno8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/@thejenniekim/never-import-react-from-react-again-thanks-to-webpack-s-provideplugin-69e7feb69e#.o6x19nno8&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;從前可能需要每個檔案都自己人工 import jquery、react&lt;/p&gt;
&lt;p&gt;現在透過 webpack 的 ProvidePlugin 可以幫你將 dependency 自動 import&lt;/p&gt;
&lt;p&gt;不只是 react , jquery  或其他 li
    
    </summary>
    
      <category term="Front-end Tool" scheme="http://kyoyadmoon.github.io/blog/categories/Front-end-Tool/"/>
    
    
      <category term="webpack" scheme="http://kyoyadmoon.github.io/blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>iOS App Deploy 證書簽發者無效: Failed to locate or generate matching signing assets</title>
    <link href="http://kyoyadmoon.github.io/blog/2016/02/23/iOS-App-Deploy-Signing-Failed/"/>
    <id>http://kyoyadmoon.github.io/blog/2016/02/23/iOS-App-Deploy-Signing-Failed/</id>
    <published>2016-02-22T16:30:53.000Z</published>
    <updated>2016-03-08T17:38:19.000Z</updated>
    
    <content type="html">&lt;p&gt;這幾天在幫公司處理 iOS APP 上架的事情，整個流程需要一堆簽章，真的很麻煩&lt;/p&gt;
&lt;p&gt;其中最雷的就是這篇要講的證書的簽發者無效，是什麼證書的簽發者無效呢？&lt;/p&gt;
&lt;p&gt;我所有的 Apple 開發相關憑證上面全部都寫簽發者過期....&lt;/p&gt;
&lt;p&gt;查了才知道是 Apple 之前給開發者的憑證 ( Apple World Wide Developer Relation Certification Authority ) 有效期限到 2016.2.14 ，也就是說這是一個熱騰騰的雷阿!&lt;/p&gt;
&lt;h1 id=&quot;u89E3_u6C7A_u65B9_u6CD5_uFF1A&quot;&gt;&lt;a href=&quot;#u89E3_u6C7A_u65B9_u6CD5_uFF1A&quot; class=&quot;headerlink&quot; title=&quot;解決方法：&quot;&gt;&lt;/a&gt;解決方法：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;打開 Keychain 在登陸和系統中刪除過期的這一個 Apple World Wide Developer Relation Certification Authority&lt;/li&gt;
&lt;li&gt;下載並安裝這個新的憑證 &lt;a href=&quot;https://developer.apple.com/certificationauthority/AppleWWDRCA.cer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WWDR intermediate certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安裝之後再回去看一下Keychain應該就不會出現簽發者過期了，新的有效期限是 2023.2.8&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://blog.leanote.com/post/kilig/Failed-to-locate-or-generate-matching-signing-assets&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.leanote.com/post/kilig/Failed-to-locate-or-generate-matching-signing-assets&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;這幾天在幫公司處理 iOS APP 上架的事情，整個流程需要一堆簽章，真的很麻煩&lt;/p&gt;
&lt;p&gt;其中最雷的就是這篇要講的證書的簽發者無效，是什麼證書的簽發者無效呢？&lt;/p&gt;
&lt;p&gt;我所有的 Apple 開發相關憑證上面全部都寫簽發者過期....&lt;/p&gt;
&lt;p&gt;查了才知道是 
    
    </summary>
    
      <category term="iOS App" scheme="http://kyoyadmoon.github.io/blog/categories/iOS-App/"/>
    
    
      <category term="上架" scheme="http://kyoyadmoon.github.io/blog/tags/%E4%B8%8A%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Github Blog 架設 - Hexo</title>
    <link href="http://kyoyadmoon.github.io/blog/2016/02/21/github-blog-build-with-hexo/"/>
    <id>http://kyoyadmoon.github.io/blog/2016/02/21/github-blog-build-with-hexo/</id>
    <published>2016-02-21T10:22:32.000Z</published>
    <updated>2016-03-09T03:16:21.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在爬文學習前端技術時，發現不少網誌都是用 github 的靜態網站來當 blog，覺得很酷，而且也不必煩惱主機的事，便搜尋了一下建立的方法，發現有滿多語言框架可以快速建立&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript : Hexo  &lt;/li&gt;
&lt;li&gt;Ruby : Jekyll  &lt;/li&gt;
&lt;li&gt;Python : Hyde  &lt;/li&gt;
&lt;li&gt;PHP : Phrozn&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;因為對於 js 較為熟悉所以選了 Hexo 來嘗試看看，先說心得好了， Hexo 框架真的很強大，blog 大多功能幾乎都包含在裡面了，而且只需透過編輯 _config.yml ，就能完成架構及功能設定，有些功能雖然是需要另外安裝 plugin 的，使用方法都相當簡單，程式碼都埋好了，只需申請服務後，填入 id 到設定檔就可以了&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Sitemap&lt;/li&gt;
&lt;li&gt;RSS Feed&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;Comment: Disqus&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Setup&quot;&gt;&lt;a href=&quot;#Setup&quot; class=&quot;headerlink&quot; title=&quot;Setup&quot;&gt;&lt;/a&gt;Setup&lt;/h1&gt;&lt;p&gt;instal Node.js &amp;amp; Hexo&lt;/p&gt;
&lt;p&gt;已經有 Node.js 環境可以直接安裝 Hexo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm install hexo -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;詳細可以參考這裡 &lt;a href=&quot;https://wwssllabcd.github.io/blog/2014/12/22/how-to-install-hexo-on-window/#安裝_Hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安裝 Hexo&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Init_Your_Blog&quot;&gt;&lt;a href=&quot;#Init_Your_Blog&quot; class=&quot;headerlink&quot; title=&quot;Init Your Blog&quot;&gt;&lt;/a&gt;Init Your Blog&lt;/h1&gt;&lt;p&gt;&lt;code&gt;hexo init &amp;lt;blog_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd &amp;lt;blog_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再加裝一些 plugin&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm i hexo-deployer-git hexo-renderer-ejs hexo-renderer-marked hexo-renderer-stylus --save&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hexo-deployer-git:  deploy to github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;hexo g  # 產生 blog&lt;/p&gt;
&lt;p&gt;hexo new &lt;post_title&gt; # 建立一個新的文章&lt;/post_title&gt;&lt;/p&gt;
&lt;p&gt;hexo s  # hexo server 讓 blog 可以在 local 端檢視 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Blog_Setting&quot;&gt;&lt;a href=&quot;#Blog_Setting&quot; class=&quot;headerlink&quot; title=&quot;Blog Setting&quot;&gt;&lt;/a&gt;Blog Setting&lt;/h1&gt;&lt;p&gt;前面有說過只需要透過設定 _config.yml 就可以完成，這邊需要注意的是， _config.yml 有兩個，一個在專案根目錄，另一個在 theme 資料夾裡&lt;/p&gt;
&lt;h1 id=&quot;Blog_Deploy&quot;&gt;&lt;a href=&quot;#Blog_Deploy&quot; class=&quot;headerlink&quot; title=&quot;Blog Deploy&quot;&gt;&lt;/a&gt;Blog Deploy&lt;/h1&gt;&lt;p&gt;deploy 到 github 前需要先到 github 開一個 repo&lt;/p&gt;
&lt;p&gt;接著將 repo 的資訊填寫到 _config.yml 的 deploy 部分&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deploy:&amp;#10;    type: git&amp;#10;    repository: git@github.com:yourname/yourRepo.git&amp;#10;    branch: gh-pages&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;url 的部分也需要調整一下，下面是範例&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;url: http://xxx.github.io/Blog&amp;#10;root: /Blog/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;透過指令部署之前請先確定你有 github 的 SSH key&lt;/p&gt;
&lt;p&gt;沒有的話請參考 &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;這篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然後就可以部署到 github 上了&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;hexo&lt;/span&gt; d &lt;span class=&quot;comment&quot;&gt;# hexo deploy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-tw/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo offical docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wwssllabcd.github.io/blog/2014/12/22/how-to-install-hexo-on-window/#安裝_Hexo_所需檔案&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo 中文安裝教學&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://v123582.github.io/blog/2015/10/25/用-hexo-建立一個自己的部落格/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://v123582.github.io/blog/2015/10/25/用-hexo-建立一個自己的部落格/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在爬文學習前端技術時，發現不少網誌都是用 github 的靜態網站來當 blog，覺得很酷，而且也不必煩惱主機的事，便搜尋了一下建立的方法，發現有滿多語言框架可以快速建立&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript : Hexo  &lt;/li
    
    </summary>
    
      <category term="Blog" scheme="http://kyoyadmoon.github.io/blog/categories/Blog/"/>
    
    
      <category term="Github" scheme="http://kyoyadmoon.github.io/blog/tags/Github/"/>
    
      <category term="Hexo" scheme="http://kyoyadmoon.github.io/blog/tags/Hexo/"/>
    
      <category term="Node.js" scheme="http://kyoyadmoon.github.io/blog/tags/Node-js/"/>
    
  </entry>
  
</feed>
