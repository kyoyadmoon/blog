<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DMoon&#39;s Laputa</title>
  <subtitle>Run like your life depends on it.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.dmoon.tw/"/>
  <updated>2019-09-17T21:45:40.623Z</updated>
  <id>https://blog.dmoon.tw/</id>
  
  <author>
    <name>DMoon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native - Android build Error: Duplicate Resource</title>
    <link href="https://blog.dmoon.tw/react-native-apk-duplicate-resource-error/"/>
    <id>https://blog.dmoon.tw/react-native-apk-duplicate-resource-error/</id>
    <published>2019-09-17T07:00:07.000Z</published>
    <updated>2019-09-17T21:45:40.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Native-build-release-APK-Error-duplicate-resource"><a href="#React-Native-build-release-APK-Error-duplicate-resource" class="headerlink" title="React Native build release APK Error: duplicate resource"></a>React Native build release APK Error: duplicate resource</h1><h2 id="問題說明"><a href="#問題說明" class="headerlink" title="問題說明"></a>問題說明</h2><p>在更新到 0.60 之後打包 android release APK 時遇到了這樣的錯誤：Error: Duplicate resources</p>
<p><a href="https://github.com/facebook/react-native/issues/22234" target="_blank" rel="external">相關 issue 連結</a></p>
<p>主要的問題是在進行 react-native bundle 指令時會重複的打包資源，因此在後續打包 APK 時出現錯誤</p>
<h2 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h2><p>主要的解決方法是在 react-native  library 的 <code>react.gradle</code> 檔案中找到 <code>doFirst</code> 程式區塊，並在下方加入一段 <code>doLast</code> 程式碼來避免重複的打包資源</p>
<p><code>node_modules/react-native/react.gradle</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">doFirst &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Add doLast */</span></span><br><span class="line">doLast &#123;</span><br><span class="line">    def moveFunc = &#123; resSuffix -&gt;</span><br><span class="line">        File originalDir = file(<span class="string">"$buildDir/generated/res/react/release/drawable-$&#123;resSuffix&#125;"</span>);</span><br><span class="line">        <span class="keyword">if</span> (originalDir.exists()) &#123;</span><br><span class="line">            File destDir = file(<span class="string">"$buildDir/../src/main/res/drawable-$&#123;resSuffix&#125;"</span>);</span><br><span class="line">            ant.move(file: originalDir, <span class="attr">tofile</span>: destDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    moveFunc.curry(<span class="string">"ldpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"mdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"hdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"xhdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"xxhdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"xxxhdpi"</span>).call()</span><br><span class="line"></span><br><span class="line">    File originalDir = file(<span class="string">"$buildDir/generated/res/react/release/raw"</span>);</span><br><span class="line">        <span class="keyword">if</span> (originalDir.exists()) &#123;</span><br><span class="line">            File destDir = file(<span class="string">"$buildDir/../src/main/res/raw"</span>);</span><br><span class="line">            ant.move(file: originalDir, <span class="attr">tofile</span>: destDir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由於這個方法是直接對 node_module 進行修改，當重新安裝 node_module 時，修改過的設定就會被蓋掉，為了避免重複的修改行為，我們可以利用 script 和 postinstall 設定來自動化。</p>
<ol>
<li><p>建立一個新資料夾 <code>fixAndroid</code>，在資料夾新增一個檔案 <code>android-gradle-fix</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">doLast &#123;</span><br><span class="line">    def moveFunc = &#123; resSuffix -&gt;</span><br><span class="line">        File originalDir = file(<span class="string">"$&#123;resourcesDir&#125;/drawable-$&#123;resSuffix&#125;"</span>)</span><br><span class="line">        <span class="keyword">if</span> (originalDir.exists()) &#123;</span><br><span class="line">            File destDir = file(<span class="string">"$&#123;resourcesDir&#125;/drawable-$&#123;resSuffix&#125;-v4"</span>)</span><br><span class="line">            ant.move(file: originalDir, <span class="attr">tofile</span>: destDir)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveFunc.curry(<span class="string">"ldpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"mdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"hdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"xhdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"xxhdpi"</span>).call()</span><br><span class="line">    moveFunc.curry(<span class="string">"xxxhdpi"</span>).call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set up inputs and outputs so gradle can cache the result</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>fixAndroid</code> 資料夾中再建立一個檔案 <code>android-release-fix.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> curDir = __dirname</span><br><span class="line">        <span class="keyword">var</span> rootDir = process.cwd()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> file = <span class="string">`<span class="subst">$&#123;rootDir&#125;</span>/node_modules/react-native/react.gradle`</span></span><br><span class="line">        <span class="keyword">var</span> dataFix = fs.readFileSync(<span class="string">`<span class="subst">$&#123;curDir&#125;</span>/android-gradle-fix`</span>, <span class="string">'utf8'</span>)</span><br><span class="line">        <span class="keyword">var</span> data = fs.readFileSync(file, <span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> doLast = <span class="string">"doLast \&#123;"</span></span><br><span class="line">        <span class="keyword">if</span> (data.indexOf(doLast) !== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">"Already fixed."</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = data.replace(<span class="regexp">/\/\/ Set up inputs and outputs so gradle can cache the result/g</span>, dataFix);</span><br><span class="line">        fs.writeFileSync(file, result, <span class="string">'utf8'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Android Gradle Fixed!'</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(error)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>package.json</code> 加入 <code>postinstall</code>  script</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"postinstall": "node ./fixAndroid/android-release-fix.js"</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>postInstall 指令會在每次 node_module 安裝結束後執行</p>
<p>這樣就能在重新安裝 node_module 後自動重新加入修復的 <code>doLast</code> 程式碼</p>
<p>參考資源: <a href="https://gist.github.com/maiquemalmeida/2f0df4a5ab79c9d4a25dc142633ac3c1" target="_blank" rel="external">https://gist.github.com/maiquemalmeida/2f0df4a5ab79c9d4a25dc142633ac3c1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Native-build-release-APK-Error-duplicate-resource&quot;&gt;&lt;a href=&quot;#React-Native-build-release-APK-Error-duplicate-resource&quot; class=&quot;h
    
    </summary>
    
      <category term="React Native" scheme="https://blog.dmoon.tw/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://blog.dmoon.tw/tags/React-Native/"/>
    
      <category term="Error" scheme="https://blog.dmoon.tw/tags/Error/"/>
    
      <category term="Android" scheme="https://blog.dmoon.tw/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>科技島讀-台灣媒體的未來</title>
    <link href="https://blog.dmoon.tw/diode-tech-ep44/"/>
    <id>https://blog.dmoon.tw/diode-tech-ep44/</id>
    <published>2019-01-09T19:48:15.000Z</published>
    <updated>2019-08-25T19:55:52.303Z</updated>
    
    <content type="html"><![CDATA[<p>最近想找一些不同的方式來接收一些新的資訊跟想法，在 Spotify 上搜尋了科技相關主題的頻道，找到了 <code>科技島讀</code> ，主要內容為台灣的科技評論，邀請不同領域的專家一同來討論議題。</p>
<p>跟平常聽音樂不同，聽這種分析討論類型的 Podcast 需要更多專注力，可以在做一些無意識活動的時候來收聽，我的話會在跑步時聽。</p>
<h2 id="科技島讀"><a href="#科技島讀" class="headerlink" title="科技島讀"></a>科技島讀</h2><ul>
<li><p>網站：<a href="https://daodu.tech/" target="_blank" rel="external">科技島讀</a></p>
</li>
<li><p>Podcast: <a href="https://open.spotify.com/show/3OcmDDJMvCaar6SkXxheMx?si=OIM25hgcQwqJFz7hXEMeQA" target="_blank" rel="external">Spotify</a></p>
</li>
<li><p>主播：<a href="https://www.facebook.com/chouchinhua" target="_blank" rel="external">周欽華</a></p>
</li>
</ul>
<iframe src="https://open.spotify.com/embed/episode/4DpQG19QlK1MFq63Wd6tNV" width="300" height="250" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>

<h2 id="Ep-44-台灣媒體的未來"><a href="#Ep-44-台灣媒體的未來" class="headerlink" title="Ep.44 - 台灣媒體的未來"></a>Ep.44 - 台灣媒體的未來</h2><h3 id="媒體壟斷情況消失"><a href="#媒體壟斷情況消失" class="headerlink" title="媒體壟斷情況消失"></a>媒體壟斷情況消失</h3><p>手機與網路的普遍，加上網路平台蓬勃發展，透過現今熱門的 Facebook、Youtube .....等平台，大大地降低了一般人發佈資訊的阻力，自媒體開始出現並流行，網紅、網路創作者成為了新興的職業，傳統大宗媒體不再具有壟斷優勢。</p>
<a id="more"></a>

<p>以往的大宗媒體雖然壟斷，但組織少容易管理，且競爭少，可以專注在提供較高品質的內容，自媒體如雨後春筍出現後，由於整體的主要商業模式仍然是取得更高的用戶關注數量，透過廣告方式賺取利益，在極度競爭下，普遍腥羶色的內容更容易取得用戶的注意，且人人都是自媒體，難以規範和控管，即便是優質的內容，也需要聳動的標題來從爆炸的資訊中脫穎而出。</p>
<h3 id="演算法成為資訊支配者"><a href="#演算法成為資訊支配者" class="headerlink" title="演算法成為資訊支配者"></a>演算法成為資訊支配者</h3><p>根據喜好推薦內容的演算法，聽起來是很棒的主意，除了解決原先少數人可以決定資訊內容的壟斷情況，還能直接提供用戶有興趣的內容。</p>
<p>然而慢慢也有一些問題浮出檯面，在這樣的演算法下，用戶接收到的都是相同立場的內容，更容易地將族群分化，同溫層的狀況更顯嚴重，不斷破碎化後，整理共識可能更低。透過 AI 等技術，演算法也會不斷利用人性弱點讓用戶像吸毒一般不斷地想看更多，來為企業提供更高的利益。</p>
<h3 id="廣告"><a href="#廣告" class="headerlink" title="廣告"></a>廣告</h3><p>除了前面提到的商業模式與競爭環境導致媒體內容庸俗化，許多網紅代言等業配方式，也讓用戶對廣告的判斷越來越模糊，需要注意的是，這些廣告的內容可能不只是商品，甚至包含某些意識，也就是最近討論熱烈的中資媒體介入選舉。</p>
<h3 id="資訊正確性"><a href="#資訊正確性" class="headerlink" title="資訊正確性"></a>資訊正確性</h3><p>在資訊爆炸的各種媒體大亂鬥時代，假新聞層出不窮，最常見的狀況是在 Line 上收到親近或熟識的朋友轉貼的訊息就完全地信任。質疑資訊可信度是每個人都必須要有的一項覺醒，並且要能利用知識或網路做更進一步查證，才能真正信任並吸收內容。</p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>我與主播同樣認為較於以往壟斷的媒體型態，現今能有多元的聲音是更好的方向，而我相信在現今資訊與知識發展都更加快速的狀況下，整體的資訊量會越來越龐大，透過更多媒體進行領域的專業分化也是必然的結果，然後上述的問題，還需要透過更多的制度和不同的商業模式來調整。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想找一些不同的方式來接收一些新的資訊跟想法，在 Spotify 上搜尋了科技相關主題的頻道，找到了 &lt;code&gt;科技島讀&lt;/code&gt; ，主要內容為台灣的科技評論，邀請不同領域的專家一同來討論議題。&lt;/p&gt;
&lt;p&gt;跟平常聽音樂不同，聽這種分析討論類型的 Podcast 需要更多專注力，可以在做一些無意識活動的時候來收聽，我的話會在跑步時聽。&lt;/p&gt;
&lt;h2 id=&quot;科技島讀&quot;&gt;&lt;a href=&quot;#科技島讀&quot; class=&quot;headerlink&quot; title=&quot;科技島讀&quot;&gt;&lt;/a&gt;科技島讀&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;網站：&lt;a href=&quot;https://daodu.tech/&quot;&gt;科技島讀&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Podcast: &lt;a href=&quot;https://open.spotify.com/show/3OcmDDJMvCaar6SkXxheMx?si=OIM25hgcQwqJFz7hXEMeQA&quot;&gt;Spotify&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主播：&lt;a href=&quot;https://www.facebook.com/chouchinhua&quot;&gt;周欽華&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&quot;https://open.spotify.com/embed/episode/4DpQG19QlK1MFq63Wd6tNV&quot; width=&quot;300&quot; height=&quot;250&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot; allow=&quot;encrypted-media&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;Ep-44-台灣媒體的未來&quot;&gt;&lt;a href=&quot;#Ep-44-台灣媒體的未來&quot; class=&quot;headerlink&quot; title=&quot;Ep.44 - 台灣媒體的未來&quot;&gt;&lt;/a&gt;Ep.44 - 台灣媒體的未來&lt;/h2&gt;&lt;h3 id=&quot;媒體壟斷情況消失&quot;&gt;&lt;a href=&quot;#媒體壟斷情況消失&quot; class=&quot;headerlink&quot; title=&quot;媒體壟斷情況消失&quot;&gt;&lt;/a&gt;媒體壟斷情況消失&lt;/h3&gt;&lt;p&gt;手機與網路的普遍，加上網路平台蓬勃發展，透過現今熱門的 Facebook、Youtube .....等平台，大大地降低了一般人發佈資訊的阻力，自媒體開始出現並流行，網紅、網路創作者成為了新興的職業，傳統大宗媒體不再具有壟斷優勢。&lt;/p&gt;
    
    </summary>
    
      <category term="讀後筆記" scheme="https://blog.dmoon.tw/categories/%E8%AE%80%E5%BE%8C%E7%AD%86%E8%A8%98/"/>
    
      <category term="Podcast" scheme="https://blog.dmoon.tw/categories/%E8%AE%80%E5%BE%8C%E7%AD%86%E8%A8%98/Podcast/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 印出樹狀資料夾目錄結構</title>
    <link href="https://blog.dmoon.tw/print-folder-tree-on-mac/"/>
    <id>https://blog.dmoon.tw/print-folder-tree-on-mac/</id>
    <published>2018-11-29T15:53:35.000Z</published>
    <updated>2019-08-25T19:26:57.749Z</updated>
    
    <content type="html"><![CDATA[<img src="/print-folder-tree-on-mac/2018-11-30-00-27-22.png" alt="2018-11-30-00-27-22.png" title>  

<p>最近寫文章需要將專案的檔案目錄結構用樹狀印出，方便閱讀，所以找了一些相關資料，整理一下做個筆記</p>
<p>homebrew 上就有個 <code>tree</code> 的套件可以做到這個功能</p>
<a id="more"></a>

<h2 id="安裝方法"><a href="#安裝方法" class="headerlink" title="安裝方法"></a>安裝方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure>

<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>安裝完成後，就可以在 terminal 直接使用 <strong>tree</strong> 這個指令啦</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br></pre></td></tr></table></figure>

<h2 id="常用參數"><a href="#常用參數" class="headerlink" title="常用參數"></a>常用參數</h2><h3 id="中文亂碼"><a href="#中文亂碼" class="headerlink" title="中文亂碼"></a>中文亂碼</h3><p>當你用 tree 列印資料夾目錄時，可能會發現一些中文檔名會出現亂碼的情況</p>
<p>加上 <code>-N</code> 參數，就可以印出原本的字元了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -N</span><br></pre></td></tr></table></figure>

<h3 id="設定印出層數"><a href="#設定印出層數" class="headerlink" title="設定印出層數"></a>設定印出層數</h3><p>加上 <code>-L</code> 參數，並在後面加上層數的數字</p>
<p>列印一層</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -L 1</span><br></pre></td></tr></table></figure>

<h3 id="依字母排序"><a href="#依字母排序" class="headerlink" title="依字母排序"></a>依字母排序</h3><p>加上 <code>-v</code> 參數可以依照字母排序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -v</span><br></pre></td></tr></table></figure>

<h2 id="其他參數"><a href="#其他參數" class="headerlink" title="其他參數"></a>其他參數</h2><p>可以透過　<code>--help</code> 指令查詢</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree --help</span><br></pre></td></tr></table></figure>

<p>這邊附上查詢得到的列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]</span><br><span class="line">    [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]</span><br><span class="line">    [--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]</span><br><span class="line">    [--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]&lt;f&gt;]</span><br><span class="line">    [--sort[=]&lt;name&gt;] [--matchdirs] [--ignore-case] [--] [&lt;directory list&gt;]</span><br><span class="line">  ------- Listing options -------</span><br><span class="line">  -a            All files are listed.</span><br><span class="line">  -d            List directories only.</span><br><span class="line">  -l            Follow symbolic links like directories.</span><br><span class="line">  -f            Print the full path prefix for each file.</span><br><span class="line">  -x            Stay on current filesystem only.</span><br><span class="line">  -L level      Descend only level directories deep.</span><br><span class="line">  -R            Rerun tree when max dir level reached.</span><br><span class="line">  -P pattern    List only those files that match the pattern given.</span><br><span class="line">  -I pattern    Do not list files that match the given pattern.</span><br><span class="line">  --ignore-case Ignore case when pattern matching.</span><br><span class="line">  --matchdirs   Include directory names in -P pattern matching.</span><br><span class="line">  --noreport    Turn off file/directory count at end of tree listing.</span><br><span class="line">  --charset X   Use charset X for terminal/HTML and indentation line output.</span><br><span class="line">  --filelimit # Do not descend dirs with more than # files in them.</span><br><span class="line">  --timefmt &lt;f&gt; Print and format time according to the format &lt;f&gt;.</span><br><span class="line">  -o filename   Output to file instead of stdout.</span><br><span class="line">  -------- File options ---------</span><br><span class="line">  -q            Print non-printable characters as &apos;?&apos;.</span><br><span class="line">  -N            Print non-printable characters as is.</span><br><span class="line">  -Q            Quote filenames with double quotes.</span><br><span class="line">  -p            Print the protections for each file.</span><br><span class="line">  -u            Displays file owner or UID number.</span><br><span class="line">  -g            Displays file group owner or GID number.</span><br><span class="line">  -s            Print the size in bytes of each file.</span><br><span class="line">  -h            Print the size in a more human readable way.</span><br><span class="line">  --si          Like -h, but use in SI units (powers of 1000).</span><br><span class="line">  -D            Print the date of last modification or (-c) status change.</span><br><span class="line">  -F            Appends &apos;/&apos;, &apos;=&apos;, &apos;*&apos;, &apos;@&apos;, &apos;|&apos; or &apos;&gt;&apos; as per ls -F.</span><br><span class="line">  --inodes      Print inode number of each file.</span><br><span class="line">  --device      Print device ID number to which each file belongs.</span><br><span class="line">  ------- Sorting options -------</span><br><span class="line">  -v            Sort files alphanumerically by version.</span><br><span class="line">  -t            Sort files by last modification time.</span><br><span class="line">  -c            Sort files by last status change time.</span><br><span class="line">  -U            Leave files unsorted.</span><br><span class="line">  -r            Reverse the order of the sort.</span><br><span class="line">  --dirsfirst   List directories before files (-U disables).</span><br><span class="line">  --sort X      Select sort: name,version,size,mtime,ctime.</span><br><span class="line">  ------- Graphics options ------</span><br><span class="line">  -i            Don&apos;t print indentation lines.</span><br><span class="line">  -A            Print ANSI lines graphic indentation lines.</span><br><span class="line">  -S            Print with CP437 (console) graphics indentation lines.</span><br><span class="line">  -n            Turn colorization off always (-C overrides).</span><br><span class="line">  -C            Turn colorization on always.</span><br><span class="line">  ------- XML/HTML/JSON options -------</span><br><span class="line">  -X            Prints out an XML representation of the tree.</span><br><span class="line">  -J            Prints out an JSON representation of the tree.</span><br><span class="line">  -H baseHREF   Prints out HTML format with baseHREF as top directory.</span><br><span class="line">  -T string     Replace the default HTML title and H1 header with string.</span><br><span class="line">  --nolinks     Turn off hyperlinks in HTML output.</span><br><span class="line">  ---- Miscellaneous options ----</span><br><span class="line">  --version     Print version and exit.</span><br><span class="line">  --help        Print usage and this help message and exit.</span><br><span class="line">  --            Options processing terminator.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/print-folder-tree-on-mac/2018-11-30-00-27-22.png&quot; alt=&quot;2018-11-30-00-27-22.png&quot; title=&quot;&quot;&gt;  

&lt;p&gt;最近寫文章需要將專案的檔案目錄結構用樹狀印出，方便閱讀，所以找了一些相關資料，整理一下做個筆記&lt;/p&gt;
&lt;p&gt;homebrew 上就有個 &lt;code&gt;tree&lt;/code&gt; 的套件可以做到這個功能&lt;/p&gt;
    
    </summary>
    
      <category term="macOS" scheme="https://blog.dmoon.tw/categories/macOS/"/>
    
    
      <category term="macOS" scheme="https://blog.dmoon.tw/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>讓程式碼更易讀的字型 FiraCode</title>
    <link href="https://blog.dmoon.tw/introduce-firacode/"/>
    <id>https://blog.dmoon.tw/introduce-firacode/</id>
    <published>2018-11-27T17:08:57.000Z</published>
    <updated>2019-08-26T07:50:53.783Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/tonsky/FiraCode" target="_blank" rel="external">FiraCode</a> 是一套讓程式碼更易讀的符號字型，當初在 GitHub 看到下面的這張預覽圖</p>
<p>第一點看到時非常不習慣，覺得只是套讓程式碼看起來更潮，裝Ｂ的開發工具
但實際試用後，發現對於程式碼的符號閱讀速度和精確度確實有不少程度的提升，看起來也更簡潔易懂</p>
<a id="more"></a>


<img src="/introduce-firacode/2019-08-26-15-36-32.png" alt="2019-08-26-15-36-32.png" title>


<p>以下舉一些例子說明，左邊是 FiraCode 字型，右邊的則是一般字型的符號顯示結果</p>
<p>等號的比較</p>
<img src="/introduce-firacode/2018-11-28-01-21-04.png" alt="2018-11-28-01-21-04.png" title>

<p>小於、大於符號的顯示</p>
<img src="/introduce-firacode/2018-11-28-01-19-27.png" alt="2018-11-28-01-19-27.png" title>

<h2 id="安裝字型方法"><a href="#安裝字型方法" class="headerlink" title="安裝字型方法"></a>安裝字型方法</h2><p>參考 <a href="https://github.com/tonsky/FiraCode/wiki#installing-font" target="_blank" rel="external">FiraCode Wiki 文件</a></p>
<h2 id="整合開發工具"><a href="#整合開發工具" class="headerlink" title="整合開發工具"></a>整合開發工具</h2><p><a href="https://github.com/tonsky/FiraCode#terminal-support" target="_blank" rel="external">Terminal 支援列表</a> | <a href="https://github.com/tonsky/FiraCode#editor-support" target="_blank" rel="external">編輯器支援列表</a></p>
<h3 id="整合-VS-Code-Visual-Studio-Code-的設定方法"><a href="#整合-VS-Code-Visual-Studio-Code-的設定方法" class="headerlink" title="整合 VS Code - Visual Studio Code 的設定方法"></a>整合 VS Code - <strong>Visual Studio Code</strong> 的設定方法</h3><ol>
<li><p>在 <strong>VS Code</strong> 使用快捷鍵開啟設定選單</p>
<ul>
<li>windows: <code>ctrl</code> + <code>,</code></li>
<li>mac: <code>cmd</code> + <code>,</code></li>
</ul>
</li>
<li><p>搜尋 <code>fontFamily</code>，找到設定欄位，在前面加上 <strong>Fira Code</strong>
結果如下圖所示</p>
<div class="figure " style="width:;"><img class="fig-img" src="2018-11-30-02-04-36.png" alt></div>
</li>
<li><p>搜尋 <code>fontLigatures</code>，勾選設定為<code>true</code></p>
<img src="/introduce-firacode/2018-11-30-01-21-34.png" alt="2018-11-30-01-21-34.png" title></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/tonsky/FiraCode&quot;&gt;FiraCode&lt;/a&gt; 是一套讓程式碼更易讀的符號字型，當初在 GitHub 看到下面的這張預覽圖&lt;/p&gt;
&lt;p&gt;第一點看到時非常不習慣，覺得只是套讓程式碼看起來更潮，裝Ｂ的開發工具
但實際試用後，發現對於程式碼的符號閱讀速度和精確度確實有不少程度的提升，看起來也更簡潔易懂&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>申請 Apple Developer 開發者帳號</title>
    <link href="https://blog.dmoon.tw/apply-apple-developer/"/>
    <id>https://blog.dmoon.tw/apply-apple-developer/</id>
    <published>2018-11-27T08:35:29.000Z</published>
    <updated>2019-08-25T19:04:42.111Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申請前需準備的資料"><a href="#申請前需準備的資料" class="headerlink" title="申請前需準備的資料"></a>申請前需準備的資料</h2><ul>
<li>已開啟<a href="https://support.apple.com/zh-cn/HT204915" target="_blank" rel="external">雙重認證</a>的 Apple ID</li>
<li>申請組織帳號 (Organization)<ul>
<li>組織的 D-U-N-S 編號</li>
<li>組織的公開網站</li>
</ul>
</li>
</ul>
<blockquote>
<p>詳細請見下方申請網址中的申請說明</p>
</blockquote>
<h2 id="申請網址"><a href="#申請網址" class="headerlink" title="申請網址"></a>申請網址</h2><p><a href="https://developer.apple.com/cn/programs/enroll/" target="_blank" rel="external">https://developer.apple.com/cn/programs/enroll/</a></p>
<p>確認一下申請說明的事項和想要申請的帳號類型</p>
<p>若不是組織帳戶，可以像我一樣選擇獨立開發者</p>
<p>若是公司或團體可以申請組織帳號，但需要更詳細的申請資料及更長的申請時間</p>
<p>接著在下一頁填寫帳號資訊，最後填寫付款資訊 (信用卡) 就可以完成申請</p>
<h2 id="申請金額"><a href="#申請金額" class="headerlink" title="申請金額"></a>申請金額</h2><p>NTD $ 3400 / 年</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;申請前需準備的資料&quot;&gt;&lt;a href=&quot;#申請前需準備的資料&quot; class=&quot;headerlink&quot; title=&quot;申請前需準備的資料&quot;&gt;&lt;/a&gt;申請前需準備的資料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;已開啟&lt;a href=&quot;https://support.apple.co
    
    </summary>
    
      <category term="iOS" scheme="https://blog.dmoon.tw/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.dmoon.tw/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React Native - Universal Linking</title>
    <link href="https://blog.dmoon.tw/react-native-universal-linking/"/>
    <id>https://blog.dmoon.tw/react-native-universal-linking/</id>
    <published>2018-11-23T07:00:07.000Z</published>
    <updated>2019-08-25T19:26:57.741Z</updated>
    
    <content type="html"><![CDATA[<p>網址跳轉手機原生 App 功能，iOS 稱 <strong>Universal Links</strong> ，Android 稱 <strong>Deep Linking</strong>，原理是在裝置上新增 URL Scheme 設定，當開啟特定規則的連結時可以開啟 App，用這個方法可以提升應用程式跨 Web 與 Mobile App 平台的使用體驗，當使用者開啟連結時，判斷裝置上是否有安裝 App ，有的話會直接開啟 App，若沒有則使用瀏覽器開啟網頁版提供檢視，或者直接導向到該裝置平台的 App 下載畫面 (iOS 的 <strong>App Store</strong> / Android 的 <strong>Google Play</strong>)</p>
<a id="more"></a>

<h2 id="設定方法"><a href="#設定方法" class="headerlink" title="設定方法"></a>設定方法</h2><p>設定希望開啟 App 的  url scheme，你可以自定義一組 url 並且在安裝 App 時向裝置註冊這個 url 與 App 的綁定。例如你做了一個 ToDoApp，你可以設定開啟你ToDoApp的連結為 <code>myToDo://blabla</code> ，由於安裝時，會對這個 url 做註冊，當你開啟這個連結時就會跳轉到你的 App。</p>
<p>如果你想註冊自己的 domain 為 url ，iOS 上需要額外做 domain 的驗證，確認你是 domain 的擁有者，帶來的好處是可以達到當使用者開啟 domain 連結時，如果有安裝 mobile App 可以直接用 native App 開啟，如果沒有的話則會自動使用瀏覽器打開網站。</p>
<h3 id="iOS-設定-Associated-Domains"><a href="#iOS-設定-Associated-Domains" class="headerlink" title="iOS 設定 Associated Domains"></a>iOS 設定 Associated Domains</h3><p>需要在你網站上新增一個 route ，你可以選擇直接掛在 domain 根目錄下或是多一層 <code>.well-known</code>
範例如下</p>
<p><code>https://&lt;fully qualified domain&gt;/apple-app-site-association</code></p>
<p>或是</p>
<p><code>https://&lt;fully qualified domain&gt;/.well-known/apple-app-site-association</code></p>
<p>接下來要讓這個 route 回傳 JSON 格式的內容
內容範例：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"webcredentials"</span>: &#123;</span><br><span class="line">       <span class="attr">"apps"</span>: [ <span class="string">"D3KQX62K1A.com.example.DemoApp"</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">   <span class="attr">"applinks"</span>: &#123;</span><br><span class="line">        <span class="attr">"apps"</span>: [],</span><br><span class="line">        <span class="attr">"details"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"appID"</span>: <span class="string">"D3KQX62K1A.com.example.DemoApp"</span>,</span><br><span class="line">                <span class="attr">"paths"</span>: [ <span class="string">"/app/*"</span> ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>App ID 格式</strong>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Team Identifier&gt;.&lt;Bundle Identifier&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p><strong>paths</strong> 可以設定想要跳轉的 url 路徑規則</p>
</blockquote>
<h3 id="設定-App-Url-Scheme"><a href="#設定-App-Url-Scheme" class="headerlink" title="設定 App Url Scheme"></a>設定 App Url Scheme</h3><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p><code>Info.plist</code>
​<figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">string</span>&gt;</span>https://your.domain.com<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>AppDelegate.m</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"RCTLinkingManager.h"</span> // import</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ADD THIS METHOD</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application continueUserActivity:(<span class="built_in">NSUserActivity</span> *)userActivity</span><br><span class="line"> restorationHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSArray</span> * _Nullable))restorationHandler</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> [RCTLinkingManager application:application</span><br><span class="line">                  continueUserActivity:userActivity</span><br><span class="line">                    restorationHandler:restorationHandler];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:label</span>=<span class="string">"&lt;YOUR_APP_NAME&gt;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"https"</span> <span class="attr">android:host</span>=<span class="string">"&lt;YOUR_DOMAIN&gt;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="React-Native-端處理"><a href="#React-Native-端處理" class="headerlink" title="React Native 端處理"></a>React Native 端處理</h2><p>新增監聽 UniversalLinking 函式，並在 App 進入點的 <code>componentDidMount</code> 執行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">listenUniversalLinking = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 當 App 從關閉狀態，被 universal links 呼叫開啟時，執行 restStackToProperRoute</span></span><br><span class="line">  Linking.getInitialURL()</span><br><span class="line">    .then(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        <span class="keyword">this</span>.resetStackToProperRoute(url);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 當 App 因為 universal links 從背景被叫醒時，執行 this.appWokeUp </span></span><br><span class="line">  Linking.addEventListener(<span class="string">'url'</span>, <span class="keyword">this</span>.appWokeUp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在 <code>componentWillUnmount</code> 事件加上移除監聽事件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">componentWillUnmount() &#123;</span><br><span class="line">    <span class="comment">// Remove the listener</span></span><br><span class="line">    Linking.removeEventListener(<span class="string">'url'</span>, <span class="keyword">this</span>.appWokeUp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>appWokeUp</strong> 處理</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">appWokeUp = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'appWokeUp'</span>, event);</span><br><span class="line">  <span class="keyword">this</span>.resetStackToProperRoute(event.url);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>resetStackToProperRoute</strong> 處理</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resetStackToProperRoute = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 在這邊判斷 url，導向到對應的畫面</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="測試方法-Test-Universal-Links-Deep-Linking"><a href="#測試方法-Test-Universal-Links-Deep-Linking" class="headerlink" title="測試方法 Test Universal Links, Deep Linking"></a>測試方法 Test Universal Links, Deep Linking</h2><p>可以在裝置或模擬器上的瀏覽器輸入網址來進行測試
或是更方便的透過下列指令來直接在裝置或模擬器上開啟網址</p>
<h3 id="iOS-1"><a href="#iOS-1" class="headerlink" title="iOS"></a>iOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun simctl openurl booted <span class="string">"https://domain.com/something"</span></span><br></pre></td></tr></table></figure>

<h3 id="Android-1"><a href="#Android-1" class="headerlink" title="Android"></a>Android</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start <span class="_">-a</span> android.intent.action.VIEW <span class="_">-d</span> <span class="string">"https://domain.com/something"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;網址跳轉手機原生 App 功能，iOS 稱 &lt;strong&gt;Universal Links&lt;/strong&gt; ，Android 稱 &lt;strong&gt;Deep Linking&lt;/strong&gt;，原理是在裝置上新增 URL Scheme 設定，當開啟特定規則的連結時可以開啟 App，用這個方法可以提升應用程式跨 Web 與 Mobile App 平台的使用體驗，當使用者開啟連結時，判斷裝置上是否有安裝 App ，有的話會直接開啟 App，若沒有則使用瀏覽器開啟網頁版提供檢視，或者直接導向到該裝置平台的 App 下載畫面 (iOS 的 &lt;strong&gt;App Store&lt;/strong&gt; / Android 的 &lt;strong&gt;Google Play&lt;/strong&gt;)&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="https://blog.dmoon.tw/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://blog.dmoon.tw/tags/React-Native/"/>
    
      <category term="Android" scheme="https://blog.dmoon.tw/tags/Android/"/>
    
      <category term="iOS" scheme="https://blog.dmoon.tw/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iPhone X 發表會心得</title>
    <link href="https://blog.dmoon.tw/2017-iPhone-X-keynote/"/>
    <id>https://blog.dmoon.tw/2017-iPhone-X-keynote/</id>
    <published>2017-09-14T17:21:04.000Z</published>
    <updated>2019-08-25T19:31:03.541Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017-iPhone-X-keynote/iPhone-X-keynote.png" alt="iPhone-X-keynote.png" title>  

<h4 id><a href="#" class="headerlink" title=" "></a> </h4><p>前天 (9/13) 凌晨是大家引頸期盼的 iPhone 十週年發表會，當然我也熬夜的看了直播，畢竟 iPhone 當時問世可說是劃時代的產品，顛覆了整個手機產業。而在十年之後，相信所有人都好奇，他們這次準備了哪些超乎想像的新驚喜，讓我們更接近未來。</p>
<p>至於發表會的內容，我想大家應該就算沒看直播，也看過許多人整理的懶人包了，大多的消息在發表會之前就都走漏，因此也少了許多新鮮感。<a id="more"></a></p>
<p>我個人對於發表會的內容感到失望，因為消息走漏 (外型什麼的都和傳言一模一樣，再看一次真的是很乏味的事)，又缺少立即具有震撼力的功能展示。</p>
<p>接下來換說一些我覺得有潛力的地方：</p>
<ol>
<li>首先是  <em>Apple A11 Bionic 處理器</em>內建了神經網路引擎，AlphaGo 戰勝職業棋士已經展現了機器學習的強大，而這只是個開始，手機在搭載了類神經引擎之後，未來能夠應用和發揮的領域很值得期待。</li>
<li><em>Dot Projector</em> 是可以感測距離的元件，用無數個點投影在物體表面，建出3D的模型。Face ID 就是利用這個感測元件得出模型資料，再透過類神經網絡引擎去做訓練和識別，因此和目前一般只透過相機，做平面照片的比對法來說會有更精準的判斷，且在每次識別的過程中持續學習的幫助下，還會越來越精準。</li>
<li>既然裝了 <em>Dot Projector</em> 感測器，一定希望不只是拿來做臉部辨識而已，有了距離感應器，且可對物體投影得到3D的模型資料，就可以對於周遭的環境有更多的資訊，有更進一步的認知，在發表會中 Demo 的 AR 相關功能，也是在宣告之後可以有更真實的 AR 體驗。</li>
</ol>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>這次 iPhone X 發表很多內容不是事先流出就是其他手機已經有的功能，像是 OLED, 無線充電....，而大多使用者可能也不覺得 Face ID 和 Android 早就有的臉部解鎖有差別，AR 和 類神經引擎的應用示範又缺少震撼力，因此完全無法呼應果粉的期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017-iPhone-X-keynote/iPhone-X-keynote.png&quot; alt=&quot;iPhone-X-keynote.png&quot; title=&quot;&quot;&gt;  

&lt;h4 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt; &lt;/h4&gt;&lt;p&gt;前天 (9/13) 凌晨是大家引頸期盼的 iPhone 十週年發表會，當然我也熬夜的看了直播，畢竟 iPhone 當時問世可說是劃時代的產品，顛覆了整個手機產業。而在十年之後，相信所有人都好奇，他們這次準備了哪些超乎想像的新驚喜，讓我們更接近未來。&lt;/p&gt;
&lt;p&gt;至於發表會的內容，我想大家應該就算沒看直播，也看過許多人整理的懶人包了，大多的消息在發表會之前就都走漏，因此也少了許多新鮮感。
    
    </summary>
    
      <category term="iOS" scheme="https://blog.dmoon.tw/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.dmoon.tw/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iPhone X 模擬器搶鮮看</title>
    <link href="https://blog.dmoon.tw/iPhoneX-simulator-with-Xcode-9-GM/"/>
    <id>https://blog.dmoon.tw/iPhoneX-simulator-with-Xcode-9-GM/</id>
    <published>2017-09-14T16:08:19.000Z</published>
    <updated>2019-08-25T19:26:57.747Z</updated>
    
    <content type="html"><![CDATA[<p>在 iPhone X 發表之前，大家應該就多少有聽到傳聞、甚至看到照片，而當時在看到全螢幕上方的咩咩頭瀏海時，我就開始疑惑 UI 會有什麼樣的變化，身為前端開發者，嗅到一股不太妙的預感，但憑著 &quot;在發表會之前，我只相信林志穎&quot; 的信念，這些都是幻覺，嚇不倒我的。</p>
<p>萬萬沒想到，發表會影片一播，竟然如同傳聞的一模一樣...</p>
<p>接著在發表會隔天就在 Facebook 看到其他開發者的哀嚎  </p>
<h3 id><a href="#" class="headerlink" title=" "></a> </h3><img src="/iPhoneX-simulator-with-Xcode-9-GM/plurk-on-iphoneX.jpg" alt="plurk-on-iphoneX.jpg" title>

<a id="more"></a>  

<p>於是我也去找了 Xcode 測試版，下載來試看看 React Native App 在 iPhone X 上的樣子，想體驗的人可以到這個<a href="https://developer.apple.com/download/" target="_blank" rel="external">網址</a>下載 GM 版本的 Xcode 9  (BTW,  macOS High Sierra 10.13 GM 也剛剛釋出了)</p>
<p>下載過程不是很順利，檔案有5GB，但下載速度不快，大約只有幾百 KB/s，而且不是很穩定，前三次都下載到一半斷掉，花了好幾個小時才載完.....</p>
<blockquote>
<p>由於是 beta 版，還是不建議大家直接蓋掉舊的 Xcode
可以將下載的 beta 版 Xcode 先重新命名後再放到 <em>應用程式</em> 資料夾</p>
</blockquote>
<p>新版的 Xcode 模擬器確實有不少變化，首先是 iOS 模擬器外觀大改，去掉了傳統的 Nav，且外觀也模擬的更真實，質感 up up</p>
<h3 id="iPhone-5s"><a href="#iPhone-5s" class="headerlink" title="iPhone 5s"></a><strong>iPhone 5s</strong></h3><img src="/iPhoneX-simulator-with-Xcode-9-GM/iPhoneSE.png" alt="iPhoneSE.png" title>



<h3 id="iPhone-X"><a href="#iPhone-X" class="headerlink" title="iPhone X"></a><strong>iPhone X</strong></h3><img src="/iPhoneX-simulator-with-Xcode-9-GM/iPhoneX.png" alt="iPhoneX.png" title>



<p>在模擬器 hover 或 focus 的狀態下，底下會有一個黑色標籤裝置顯示名稱和系統版本，其中我覺得最特別的是，如果你仔細看的話會發現多出了模擬器側邊的按鈕 (Home鍵、電源鍵、音量鍵、靜音開關)，現在這些實體按鈕也能夠透過點選直接操作了，而且聲音效果也有，例如：按電源鍵鎖定畫面，會有大家熟悉的鎖定音效，總之和之前相比，模擬的完成度又提高許多</p>
<h3 id="React-Native-iPhone-X-測試"><a href="#React-Native-iPhone-X-測試" class="headerlink" title="React Native - iPhone X 測試"></a>React Native - iPhone X 測試</h3><img src="/iPhoneX-simulator-with-Xcode-9-GM/iPhoneX-React-Native.png" alt="iPhoneX-React-Native.png" title>



<p>真的跟 FB 上看到的一樣悲劇</p>
<p><strong>專案相關套件版本</strong></p>
 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> 	<span class="attr">"react"</span>: <span class="string">"16.0.0-alpha.12"</span>,</span><br><span class="line"> 	<span class="attr">"react-native"</span>: <span class="string">"0.47.1"</span>,</span><br><span class="line"> 	<span class="attr">"react-native-router-flux"</span>: <span class="string">"^4.0.0-beta.18"</span>,</span><br><span class="line"> 	<span class="attr">"react-native-vector-icons"</span>: <span class="string">"4.2.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>畫面中的 Navbar 和 TabBar 都是 <a href="https://github.com/aksonov/react-native-router-flux" target="_blank" rel="external">react-native-router-flux</a> 這個套件預設的樣式
( react-native-router-flux 是一個 based on <a href="https://reactnavigation.org/" target="_blank" rel="external">React Navigation</a> 的場景管理套件 )</p>
<p>嗯....　看來有太多要改的地方了　還是先改天吧</p>
<p>希望在 iPhone X 上市前，RN 會有對應的規劃</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 iPhone X 發表之前，大家應該就多少有聽到傳聞、甚至看到照片，而當時在看到全螢幕上方的咩咩頭瀏海時，我就開始疑惑 UI 會有什麼樣的變化，身為前端開發者，嗅到一股不太妙的預感，但憑著 &amp;quot;在發表會之前，我只相信林志穎&amp;quot; 的信念，這些都是幻覺，嚇不倒我的。&lt;/p&gt;
&lt;p&gt;萬萬沒想到，發表會影片一播，竟然如同傳聞的一模一樣...&lt;/p&gt;
&lt;p&gt;接著在發表會隔天就在 Facebook 看到其他開發者的哀嚎  &lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt; &lt;/h3&gt;&lt;img src=&quot;/iPhoneX-simulator-with-Xcode-9-GM/plurk-on-iphoneX.jpg&quot; alt=&quot;plurk-on-iphoneX.jpg&quot; title=&quot;&quot;&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://blog.dmoon.tw/categories/iOS/"/>
    
    
      <category term="React Native" scheme="https://blog.dmoon.tw/tags/React-Native/"/>
    
      <category term="iOS" scheme="https://blog.dmoon.tw/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React Native CodePush 偷天換日術</title>
    <link href="https://blog.dmoon.tw/react-native-integrate-with-code-push/"/>
    <id>https://blog.dmoon.tw/react-native-integrate-with-code-push/</id>
    <published>2017-02-19T10:16:36.000Z</published>
    <updated>2019-08-25T19:26:57.749Z</updated>
    
    <content type="html"><![CDATA[<p>CodePush 是一個雲端服務，能夠讓 Cordova 和 React Native 的開發者將手機應用的更新，跳過提交審查，直接部署到用戶的設備上。 它擔任類似中間倉庫的角色，開發者可以把更新（JS，HTML，CSS和圖片）發佈到這個倉庫上，透過程式碼的整合，Apps 就能夠查詢到更新並且下載。</p>
<a id="more"></a>

<h1 id="Setup-CodePush-Service"><a href="#Setup-CodePush-Service" class="headerlink" title="Setup CodePush Service"></a>Setup CodePush Service</h1><p>首先我們先從 CodePush 服務的準備開始～～</p>
<h2 id="Install-CodePush-Management-CLI"><a href="#Install-CodePush-Management-CLI" class="headerlink" title="Install CodePush Management CLI"></a>Install CodePush Management CLI</h2><p>首先我們需要安裝 <a href="https://github.com/Microsoft/code-push/tree/master/cli" target="_blank" rel="external">CodePush CLI</a></p>
<p><code>$ npm install -g code-push-cli</code></p>
<p>安裝完後察看版本確認安裝成功</p>
<p><code>$ code-push -v</code></p>
<h2 id="Register-amp-Login-CodePush"><a href="#Register-amp-Login-CodePush" class="headerlink" title="Register &amp; Login CodePush"></a>Register &amp; Login CodePush</h2><p><code>$ code-push register</code></p>
<p>執行後會開啟網頁讓你進行註冊，並在 terminal 要求填入 access key</p>
<p>可以直接透過網頁以微軟或Github帳號做第三方登入進行授權</p>
<p>註冊登入後頁面會給你 access key </p>
<p>此時複製回到 terminal 貼上</p>
<ul>
<li>登入：<code>$ code-push login</code> </li>
<li>登出：<code>$ code-push loout</code> </li>
</ul>
<h2 id="Add-new-App"><a href="#Add-new-App" class="headerlink" title="Add new App"></a>Add new App</h2><p><code>$ code-push app add &lt;appName&gt;</code></p>
<p>新增完後透過 ls 指令確認新增成功</p>
<p>新增的 App 將會有兩個預設的環境</p>
<ul>
<li>Staging：通常用來當作開發中的部署環境</li>
<li>Production：上線的部署環境</li>
</ul>
<p>每個部署環境可以當成是 <code>git</code> 當中不同的 branch 概念</p>
<p>也能夠從 history 進行版本控制，做一些 rollback 的動作</p>
<h2 id="Get-Deployment-Key-Of-App"><a href="#Get-Deployment-Key-Of-App" class="headerlink" title="Get Deployment Key Of App"></a>Get Deployment Key Of App</h2><p><code>$ code-push deployment ls &lt;appName&gt; -k</code></p>
<p>就能看見該 App 所有部署環境的 deplyment key</p>
<h1 id="React-Native-Code-Push-整合"><a href="#React-Native-Code-Push-整合" class="headerlink" title="React-Native-Code-Push 整合"></a>React-Native-Code-Push 整合</h1><ul>
<li><a href="https://github.com/Microsoft/react-native-code-push#getting-started" target="_blank" rel="external">Official Docs</a></li>
</ul>
<p>文件寫得相當詳細，Step by step 照著文件作就可以</p>
<p>這邊簡單說明流程</p>
<p>由於不同的 React Native 版本所需要做的配置略有不同</p>
<p>這邊以 React Native v0.41.2 為例</p>
<ol>
<li><p>安裝 react-native-code-push : </p>
<p><code>$ npm install --save react-native-code-push@latest</code> 
<a href="https://github.com/Microsoft/react-native-code-push#supported-react-native-platforms" target="_blank" rel="external">點一下這邊</a> 確認 RN 版本和套件支援的版本相依性 </p>
</li>
<li><p>安裝完後，接下來需要 link</p>
<p>由於 React Native 版本在 0.27 之後，已經將 <code>rnpm link</code> 合併到 <code>React Native CLI</code></p>
<p>直接使用</p>
<p><code>$ react-native link react-native-code-push</code></p>
<p>0.27 以下的版本則可以透過 <code>$ rnpm link</code> 設置，詳細可以參考 <a href="https://github.com/Microsoft/react-native-code-push#getting-started" target="_blank" rel="external">Setup</a></p>
</li>
<li><p>安裝完後還需要做兩個整合的動作 (這邊的設置方式對應不同的 RN 版本也有差異)</p>
<ul>
<li><p>設定 deployment key 到專案中</p>
<ul>
<li><p>Android :</p>
<p>編輯 <code>android/app/src/main/java/com/&lt;ProjectName&gt;/MainApplication.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">          <span class="keyword">new</span> MainReactPackage(),</span><br><span class="line">            <span class="keyword">new</span> CodePush(<span class="string">"Deployment_Key"</span>, getApplicationContext(), BuildConfig.DEBUG)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>填入 app 的 deployment key</p>
</li>
<li><p>iOS :</p>
<p>在 <code>ios/&lt;Project_Name&gt;/info.plist</code> 中 </p>
<p>可以看見 <code>CodePushDeploymentKey</code> 欄位，在 value 欄填入 deployment key 即可</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>最後是整合 JS 的部分</p>
<p>使用 HOC (Higher Order Component) 的方式就能快速的整合到你的 App 中了</p>
<p>程式碼如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">"react-native-code-push"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyApp = codePush(MyApp);</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<h1 id="進行更新"><a href="#進行更新" class="headerlink" title="進行更新"></a>進行更新</h1><p>release-react 是專門更新 React Native 專案的指令</p>
<p>會自動將目前檔案產生 bundle 並上傳更新版本到 CodePush 的雲端上</p>
<p><code>$ code-push release-react &lt;appName&gt;  &lt;platform&gt; -d &lt;deploymentName&gt;</code></p>
<p>如果沒有給 -d 的 <code>deploymentName</code> 參數的話，預設將會是 <code>Staging</code></p>
<h2 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h2><ul>
<li><a href="http://www.jianshu.com/p/fa362da953c7" target="_blank" rel="external">http://www.jianshu.com/p/fa362da953c7</a></li>
<li><a href="http://www.jianshu.com/p/87ccfb795635" target="_blank" rel="external">http://www.jianshu.com/p/87ccfb795635</a></li>
<li><a href="http://bbs.reactnative.cn/topic/725/code-push-%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E5%92%8C%E6%95%99%E7%A8%8B" target="_blank" rel="external">http://bbs.reactnative.cn/topic/725/code-push-%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E5%92%8C%E6%95%99%E7%A8%8B</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CodePush 是一個雲端服務，能夠讓 Cordova 和 React Native 的開發者將手機應用的更新，跳過提交審查，直接部署到用戶的設備上。 它擔任類似中間倉庫的角色，開發者可以把更新（JS，HTML，CSS和圖片）發佈到這個倉庫上，透過程式碼的整合，Apps 就能夠查詢到更新並且下載。&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="https://blog.dmoon.tw/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://blog.dmoon.tw/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages 免費 ssl 設定 - 輕鬆擁有 https 綠鎖頭 (2)</title>
    <link href="https://blog.dmoon.tw/github-pages-with-free-ssl/"/>
    <id>https://blog.dmoon.tw/github-pages-with-free-ssl/</id>
    <published>2017-02-01T08:15:33.000Z</published>
    <updated>2019-08-25T19:26:57.739Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="/github-pages-custom-domain/" title="上一篇">上一篇</a> 中，我們應該已經設定好了自定義域名，接下來就是幫我們的自定義域名加上漂亮安全的 https 綠色鎖頭啦。</p>
<a id="more"></a>

<h2 id="Add-Free-SSL"><a href="#Add-Free-SSL" class="headerlink" title="Add Free SSL"></a>Add Free SSL</h2><p>說到 Free SSL 相信很多人第一個想到的就是開源的 <a href="https://letsencrypt.org/" target="_blank" rel="external">Let&#39;s Encrypt</a> 吧，不過很遺憾在爬文時發現，Github 似乎並不支援 Let&#39;s Encrypt ，因此只好找其他的免費 SSL 憑證了，這篇要說明如何使用 <a href="https://www.cloudflare.com/" target="_blank" rel="external">CloudFlare</a> 幫 Github Pages 掛上的免費 SSL</p>
<ol>
<li><p><a href="https://www.cloudflare.com/a/sign-up" target="_blank" rel="external">註冊 CloudFlare 帳號</a>
如果你和我一樣只是要用免費版的 SSL，註冊完不必填信用卡資訊，直接到信箱收信</p>
</li>
<li><p><a href="https://www.cloudflare.com/a/account/my-account" target="_blank" rel="external">由此登入</a> 點選 <code>Add website</code> 新增你的域名，ex: dmoon.space
確認後會開始掃描你的域名將地區檔設定掃出來，自動設定到 CloudFlare 的 DNS 上
接著他會提供幾個他設定好的 DNS 位址給你，請你到域名提供商的館理頁面，設定為他提供給你的 DNS</p>
</li>
<li><p>設定 CloudFlare 提供的 DNS
例如我是在 gandi 上買的域名，回到 gandi 域名管理頁的右下角會看到 <code>域名伺服器</code>，按下 <code>修改伺服器</code> 設定為 CloudFlare 提供的 DNS</p>
</li>
<li><p>等待... 等待... 再等待...</p>
<p>更改 DNS 需要等滿久的時間才會生效，我等了應該有四五個小時，在他生效之前我們可以繼續下一步處理一些額外的設定</p>
</li>
<li><p>請先到 CloudFlare website 管理頁面，將 Crypto / SSL 設定為 Flexible
如圖：</p>
<img src="/github-pages-with-free-ssl/flexible_config.png" alt="flexible_config.png" title>
<p>好奇 Flexible 意思的請點這裡 <a href="https://sofree.cc/cloudflare-free-ssl/" target="_blank" rel="external">Read More...</a></p>
</li>
<li><p>到這邊差不多就完成囉
接下來是對網站做一些額外設定
像是在 <head> 中加上</head></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> host = <span class="string">"yoursite.com"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> ((host == <span class="built_in">window</span>.location.host) &amp;&amp; (<span class="built_in">window</span>.location.protocol != <span class="string">"https:"</span>))</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.location.protocol = <span class="string">"https"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>讓 http 的連線自動導向到 https</p>
</li>
<li><p>告訴搜尋引擎偏好網址
將下面加入你的 Hexo theme header template 中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;canonical&quot; href=&quot;&lt;%= url %&gt;&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/" target="_blank" rel="external">https://sheharyar.me/blog/free-ssl-for-github-pages-with-custom-domains/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;a href=&quot;/github-pages-custom-domain/&quot; title=&quot;上一篇&quot;&gt;上一篇&lt;/a&gt; 中，我們應該已經設定好了自定義域名，接下來就是幫我們的自定義域名加上漂亮安全的 https 綠色鎖頭啦。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.dmoon.tw/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.dmoon.tw/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://blog.dmoon.tw/tags/Github-Pages/"/>
    
      <category term="HTTPS" scheme="https://blog.dmoon.tw/tags/HTTPS/"/>
    
      <category term="SSL" scheme="https://blog.dmoon.tw/tags/SSL/"/>
    
      <category term="Custom Domain" scheme="https://blog.dmoon.tw/tags/Custom-Domain/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages 自訂域名 - 輕鬆擁有 https 綠鎖頭 (1)</title>
    <link href="https://blog.dmoon.tw/github-pages-custom-domain/"/>
    <id>https://blog.dmoon.tw/github-pages-custom-domain/</id>
    <published>2017-01-31T08:15:33.000Z</published>
    <updated>2019-08-25T19:30:47.167Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到好多人的 Github Pages 都有了自己的域名和 https，剛好在 <a href="https://www.gandi.net/" target="_blank" rel="external">Gandi</a> 上看到 space 的 domain 好便宜，心血來潮於是就買了一個來玩，之前其實沒有碰過 domain 相關的設定，原先想說可能會有點麻煩，沒想到比預期還要容易許多，簡單做個筆記記錄一下，整個過程需要對 Github Pages, <a href="https://www.gandi.net/" target="_blank" rel="external">Gandi</a>,  <a href="https://www.cloudflare.com/" target="_blank" rel="external">CloudFlare</a> (SSL) 做一些設定。</p>
<p>我們先從 custom domain 開始吧</p>
<a id="more"></a>

<h2 id="Set-Custom-Domain"><a href="#Set-Custom-Domain" class="headerlink" title="Set Custom Domain"></a>Set Custom Domain</h2><ol>
<li><h3 id="購買域名"><a href="#購買域名" class="headerlink" title="購買域名"></a>購買域名</h3><p>我是在 <a href="https://www.gandi.net/" target="_blank" rel="external">gandi</a> 購買的，大家可以到各域名商的網站上搜尋喜歡的域名進行購買，租期到了要記得續訂，才不會發生慘劇。</p>
</li>
<li><h3 id="設定-區域檔"><a href="#設定-區域檔" class="headerlink" title="設定 區域檔"></a>設定 區域檔</h3><p>在 gandi 購買完後，進入 domain 的 管理頁面找到 <code>編輯區域檔</code> 的連結，進入區域檔的編輯頁面，( gandi 無法更改現正套用的設定檔，所以需要先新增一個來編輯，編輯好再選擇套用) ，總之最後設定的結果應該要長這樣</p>
<img src="/github-pages-custom-domain/gandi-zone-configure.png" alt="gandi-zone-configure.png" title>
<p><code>192.30.252.153</code> , <code>192.30.252.154</code> 是 Github 的位址
第三個 CNAME 的設定，name 的地方可以填你想要的子網域(subDomain)，value 則是填寫你的 github.io 網址（最後記得加上一個 <code>.　ex: kyoyadmoon.github.io.</code>）</p>
<p>需要畫面截圖參考，<a href="http://spector.io/how-to-set-up-github-pages-with-a-custom-domain-on-gandi/" target="_blank" rel="external">請點這裡</a></p>
<p><code>記得使用新編輯的設定!</code></p>
<p><code>記得使用新編輯的設定!</code></p>
<p><code>記得使用新編輯的設定!</code></p>
</li>
<li><h3 id="等待-amp-設定-Github-Page-CNAME"><a href="#等待-amp-設定-Github-Page-CNAME" class="headerlink" title="等待 &amp; 設定 Github Page CNAME　"></a>等待 &amp; 設定 Github Page CNAME　</h3><p>等待設定更新需要一些時間，多久不一定，可能幾分鐘也可能幾小時</p>
<p>如果你在瀏覽器輸入你設定的子域名能夠看到 Github 的頁面（這時應該是 Github 404 頁面）表示更新生效了</p>
<p>在等待的時間我們可以先來設定 Github CNAME</p>
<p>能夠讓輸入原本 Github Pages url 時，自動導向到你的域名底下</p>
<blockquote>
<h4 id="demo"><a href="#demo" class="headerlink" title="demo:"></a>demo:</h4><p>試著開啟我的 Github Page 網址：<a href="https://kyoyadmoon.github.io/blog/" target="_blank" rel="external">https://kyoyadmoon.github.io/blog/</a></p>
<p>會看到自動導向到 <a href="https://blog.dmoon.space" target="_blank" rel="external">https://blog.dmoon.space</a> 底下</p>
</blockquote>
<h4 id="Github-Page-CNAME"><a href="#Github-Page-CNAME" class="headerlink" title="Github Page CNAME"></a>Github Page CNAME</h4><p>設定方法是在跟目錄底下新增一個 <code>CNAME</code> 檔案</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.dmoon.space</span><br></pre></td></tr></table></figure>

<p>裡面填寫你設定的域名就可以了</p>
<p>和我一樣是 Hexo 的使用者請看這裡！</p>
<p>如果直接透過 git 添加到 github 上的話，下次 hexo generate, hexo deploy 時就會被覆蓋掉</p>
<p>請把 CNAME 檔案放到 /source/ 底下</p>
<p>hexo g 就會產生對應的檔案囉</p>
</li>
<li><h4 id="Hexo-設定"><a href="#Hexo-設定" class="headerlink" title="Hexo 設定"></a>Hexo 設定</h4><p><code>_config.yml</code> 中將 url 設定為新的域名</p>
<p>設定好之後記得用 hexo g &amp;&amp; hexo d 更新 blog</p>
</li>
</ol>
<p>想要加上免費的 SSL 簽證，完成 HTTPS 綠色鎖頭請見 <a href="/github-pages-with-free-ssl/" title="Hexo Github Pages 免費 SSL 設定">Hexo Github Pages 免費 SSL 設定</a></p>
<h2 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h2><ul>
<li><p><a href="http://www.cnblogs.com/winxiang/archive/2012/08/11/2633337.html" target="_blank" rel="external">SSL 與 HTTPS 介紹</a></p>
<p>​</p>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="http://spector.io/how-to-set-up-github-pages-with-a-custom-domain-on-gandi/" target="_blank" rel="external">http://spector.io/how-to-set-up-github-pages-with-a-custom-domain-on-gandi/</a></li>
<li><a href="https://blog.ccjeng.com/2016/03/How-To-Config-A-Record-Domain-Name-In-GitHub.html" target="_blank" rel="external">https://blog.ccjeng.com/2016/03/How-To-Config-A-Record-Domain-Name-In-GitHub.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看到好多人的 Github Pages 都有了自己的域名和 https，剛好在 &lt;a href=&quot;https://www.gandi.net/&quot;&gt;Gandi&lt;/a&gt; 上看到 space 的 domain 好便宜，心血來潮於是就買了一個來玩，之前其實沒有碰過 domain 相關的設定，原先想說可能會有點麻煩，沒想到比預期還要容易許多，簡單做個筆記記錄一下，整個過程需要對 Github Pages, &lt;a href=&quot;https://www.gandi.net/&quot;&gt;Gandi&lt;/a&gt;,  &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; (SSL) 做一些設定。&lt;/p&gt;
&lt;p&gt;我們先從 custom domain 開始吧&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://blog.dmoon.tw/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://blog.dmoon.tw/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://blog.dmoon.tw/tags/Github-Pages/"/>
    
      <category term="HTTPS" scheme="https://blog.dmoon.tw/tags/HTTPS/"/>
    
      <category term="SSL" scheme="https://blog.dmoon.tw/tags/SSL/"/>
    
      <category term="Custom Domain" scheme="https://blog.dmoon.tw/tags/Custom-Domain/"/>
    
  </entry>
  
  <entry>
    <title>Macbook Pro Retina 螢幕鍍膜剝落送修心得</title>
    <link href="https://blog.dmoon.tw/Retina-Display-AntiReflective-Coating-Damage/"/>
    <id>https://blog.dmoon.tw/Retina-Display-AntiReflective-Coating-Damage/</id>
    <published>2016-10-05T08:16:41.000Z</published>
    <updated>2019-08-25T19:31:28.186Z</updated>
    
    <content type="html"><![CDATA[<p>我是 2015 年初購買的 MacBook Pro (Retina, 13-inch, Mid 2014)，使用上體驗真的很棒，覺得非常值得，但用了大約半年後，從中間開始出現輕微的鍍膜剝落情形，立馬上網 Google，發現全球災情不少，但即使是保固內，仍有多例在官方評估後認為是人為損害，無法免費維修。引起網友連署希望官方處理，當時看完也是心涼了一截，花了許多錢才買的電腦沒想到半年就出了狀況。之後一邊 follow 相關消息，剝落狀況也漸漸擴散，明顯可以看出鍵盤按鍵的輪廓痕跡，合理推測是螢幕闔上時，和鍵盤接觸導致的鍍膜剝落，心想這應該是設計上的問題，如果真的不處理，對於蘋果實在相當失望。</p>
<a id="more"></a>

<p>最後在 2015 年底的時候，在 <a href="http://www.macuknow.com/node/73531" target="_blank" rel="external">MACUKNOW</a> 上面看到官方將會針對鍍膜剝落的 Retina MacBook 提供免費維修服務，心裡的大石頭才放下了些，雖然去年十一月就看到了消息，不過因為實習的工作需要，也沒辦法將筆電送修一個禮拜之久，於是一直拖到兩個禮拜前才送修。</p>
<h2 id="送修過程"><a href="#送修過程" class="headerlink" title="送修過程"></a>送修過程</h2><p>由於台灣並沒有 Apple 直營的維修中心，只有<strong>授權</strong>維修中心，於是爬了一些網路上的文章，覺得 STUDIO A 相對好評較多，維修門市本就較少，也不是所有維修門市業務內容都包含 MacBook，最後選擇到<code>大安門市</code>送修（有提供線上預約），只需要帶著 MacBook 過去就可以了</p>
<p><strong>幾點注意事項：</strong></p>
<blockquote>
<ol>
<li>建議先做好備份 (雖然理論上只會更換螢幕，還是以防萬一)</li>
<li>或許你也有貼貼紙的習慣，如果順利更換營幕的話，貼紙是拿不回來的</li>
<li>不需要攜帶配件，填寫維修單後，他們會將電腦代送給 Apple 評估是否能免費維修。</li>
</ol>
</blockquote>
<p>果然一週後就接到電話通知，能夠到維修門市領取啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是 2015 年初購買的 MacBook Pro (Retina, 13-inch, Mid 2014)，使用上體驗真的很棒，覺得非常值得，但用了大約半年後，從中間開始出現輕微的鍍膜剝落情形，立馬上網 Google，發現全球災情不少，但即使是保固內，仍有多例在官方評估後認為是人為損害，無法免費維修。引起網友連署希望官方處理，當時看完也是心涼了一截，花了許多錢才買的電腦沒想到半年就出了狀況。之後一邊 follow 相關消息，剝落狀況也漸漸擴散，明顯可以看出鍵盤按鍵的輪廓痕跡，合理推測是螢幕闔上時，和鍵盤接觸導致的鍍膜剝落，心想這應該是設計上的問題，如果真的不處理，對於蘋果實在相當失望。&lt;/p&gt;
    
    </summary>
    
      <category term="MacBook" scheme="https://blog.dmoon.tw/categories/MacBook/"/>
    
    
      <category term="Macbook" scheme="https://blog.dmoon.tw/tags/Macbook/"/>
    
      <category term="Retina" scheme="https://blog.dmoon.tw/tags/Retina/"/>
    
  </entry>
  
  <entry>
    <title>React Native 進階開發配置-自動設定 IP</title>
    <link href="https://blog.dmoon.tw/react-native-auto-ip-configuration/"/>
    <id>https://blog.dmoon.tw/react-native-auto-ip-configuration/</id>
    <published>2016-04-27T12:57:40.000Z</published>
    <updated>2019-08-25T19:31:16.638Z</updated>
    
    <content type="html"><![CDATA[<img src="/react-native-auto-ip-configuration/react-native.png" alt="react-native.png" title>

<p>在上一篇 <a href="http://kyoyadmoon.github.io/blog/2016/04/19/react-native-101/" target="_blank" rel="external">React Native 初心者攻略</a> 中有說明如何在實體 iPhone 上開發</p>
<p>透過 <code>AppDelegate.m</code> 這個檔案我們可以將 localhost 手動更改成電腦 ip 來達到實機測試的目的</p>
<p>但是這樣的開發方式有幾個缺點</p>
<blockquote>
<ol>
<li>需要經常手動去做更改，尤其當你是使用筆電，甚至是和其他人共同開發的狀況，就會常常在 merge 時衝突，除非團隊都使用 localhost 以 simulator 進行開發</li>
<li>沒辦法在實體機器上 Debug in Chrome</li>
</ol>
</blockquote>
<p>在開發一段時間後，實在受不了，好在找到了自動設定的方法</p>
<p><code>透過 shell script 抓取電腦的 IP 後，寫入到專案</code></p>
<a id="more"></a>

<h1 id="設置方法"><a href="#設置方法" class="headerlink" title="設置方法"></a>設置方法</h1><h2 id="抓取電腦-IP"><a href="#抓取電腦-IP" class="headerlink" title="抓取電腦 IP"></a>抓取電腦 IP</h2><p>我們需要先寫出能夠抓取電腦 IP 的指令</p>
<p>網路上大多使用這個指令，可以先填到 terminal 執行看看，確認 IP 是否正確</p>
<blockquote>
<p><code>ifconfig | grep inet\ | tail -1 | cut -d &quot; &quot; -f 2</code></p>
</blockquote>
<p>但是因為我們專案後端 server 有使用到 docker ，使用上面 command 抓到的是錯誤的 IP</p>
<p>所以我需要改成這樣</p>
<blockquote>
<p><code>ifconfig | grep -Eo &#39;inet (addr:)?([0-9]*\.){3}[0-9]*&#39; | grep -Eo &#39;([0-9]*\.){3}[0-9]*&#39; | grep -v &#39;127.0.0.1&#39; | head -1</code></p>
</blockquote>
<p>OK 我們現在能夠拿到正確的 IP 了</p>
<h2 id="Add-Run-Script"><a href="#Add-Run-Script" class="headerlink" title="Add Run Script"></a>Add Run Script</h2><p>再來我們需要設定在專案執行時執行一段 shell script 去抓取 IP 寫入到專案中</p>
<p>照著圖中藍色 focus 的地方找到 <code>Build Phases</code></p>
<img src="/react-native-auto-ip-configuration/addScript.png" alt="addScript.png" title>

<p>新增一個 Run Script 後的畫面</p>
<img src="/react-native-auto-ip-configuration/editScript.png" alt="editScript.png" title>

<p>接下來就是填入主角 script  了</p>
<p>下面的 script 會在專案的 INFOPLIST 裡新增一個 SERVER_IP 的欄位，並把 IP 寫入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INFOPLIST=&quot;$&#123;TARGET_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;</span><br><span class="line">echo &quot;writing to $INFOPLIST&quot;</span><br><span class="line">PLISTCMD=&quot;Add :SERVER_IP string $(ifconfig | grep -Eo &apos;inet (addr:)?([0-9]*\.)&#123;3&#125;[0-9]*&apos; | grep -Eo &apos;([0-9]*\.)&#123;3&#125;[0-9]*&apos; | grep -v &apos;127.0.0.1&apos; | head -1)&quot;</span><br><span class="line">echo -n &quot;$INFOPLIST&quot; | xargs -0 /usr/libexec/PlistBuddy -c &quot;$PLISTCMD&quot; || true</span><br><span class="line">PLISTCMD=&quot;Set :SERVER_IP $(ifconfig | grep -Eo &apos;inet (addr:)?([0-9]*\.)&#123;3&#125;[0-9]*&apos; | grep -Eo &apos;([0-9]*\.)&#123;3&#125;[0-9]*&apos; | grep -v &apos;127.0.0.1&apos; | head -1)&quot;</span><br><span class="line">echo -n &quot;$INFOPLIST&quot; | xargs -0 /usr/libexec/PlistBuddy -c &quot;$PLISTCMD&quot; || true</span><br></pre></td></tr></table></figure>

<p>填好之後會像這樣</p>
<img src="/react-native-auto-ip-configuration/addedScript.png" alt="addedScript.png" title>

<h2 id="在-AppDelegate-m-讀取-SERVER-IP"><a href="#在-AppDelegate-m-讀取-SERVER-IP" class="headerlink" title="在 AppDelegate.m 讀取 SERVER_IP"></a>在 <code>AppDelegate.m</code> 讀取 SERVER_IP</h2><p>打開 <code>AppDelegate.m</code> </p>
<p>將原本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</span><br></pre></td></tr></table></figure>

<p>替換成能夠動態改變 SERVER_IP 的 code</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;SERVER_IP&quot;];</span><br><span class="line">NSString *jsCodeUrlString = [NSString stringWithFormat:@&quot;http://%@:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;, serverIP];</span><br><span class="line">NSString *jsBundleUrlString = [jsCodeUrlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">jsCodeLocation = [NSURL URLWithString:jsBundleUrlString];</span><br></pre></td></tr></table></figure>

<img src="/react-native-auto-ip-configuration/AppDelegate.png" alt="AppDelegate.png" title>

<p>這時候你可以測試看看 simulator 和 real device 上是不是都能正常運作，可以的話就成功囉！</p>
<h2 id="Debug-in-Chrome-on-Real-Device"><a href="#Debug-in-Chrome-on-Real-Device" class="headerlink" title="Debug in Chrome on Real Device"></a>Debug in Chrome on Real Device</h2><p>找到 <code>RCTWebSocketExecutor.ｍ</code> 的 setUp</p>
<img src="/react-native-auto-ip-configuration/RCTWebSocketExecutor.png" alt="RCTWebSocketExecutor.png" title>

<p>將這行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSString *URLString = [NSString stringWithFormat:@&quot;http://localhost:%zd/debugger-proxy?role=client&quot;, port];</span><br></pre></td></tr></table></figure>

<p>替換成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;SERVER_IP&quot;];</span><br><span class="line">NSString *URLString = [NSString stringWithFormat:@&quot;http://%@:%zd/debugger-proxy?role=client&quot;, serverIP, port];</span><br></pre></td></tr></table></figure>

<p>這邊一樣是將 localhost 改成 SERVER_IP</p>
<p>實體裝置就能透過 wifi 在電腦的 chrome 上進行 debug 了，趕快試試看！</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://moduscreate.com/automated-ip-configuration-for-react-native-development/" target="_blank" rel="external">http://moduscreate.com/automated-ip-configuration-for-react-native-development/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/react-native-auto-ip-configuration/react-native.png&quot; alt=&quot;react-native.png&quot; title=&quot;&quot;&gt;

&lt;p&gt;在上一篇 &lt;a href=&quot;http://kyoyadmoon.github.io/blog/2016/04/19/react-native-101/&quot;&gt;React Native 初心者攻略&lt;/a&gt; 中有說明如何在實體 iPhone 上開發&lt;/p&gt;
&lt;p&gt;透過 &lt;code&gt;AppDelegate.m&lt;/code&gt; 這個檔案我們可以將 localhost 手動更改成電腦 ip 來達到實機測試的目的&lt;/p&gt;
&lt;p&gt;但是這樣的開發方式有幾個缺點&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;需要經常手動去做更改，尤其當你是使用筆電，甚至是和其他人共同開發的狀況，就會常常在 merge 時衝突，除非團隊都使用 localhost 以 simulator 進行開發&lt;/li&gt;
&lt;li&gt;沒辦法在實體機器上 Debug in Chrome&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;在開發一段時間後，實在受不了，好在找到了自動設定的方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;透過 shell script 抓取電腦的 IP 後，寫入到專案&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="https://blog.dmoon.tw/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://blog.dmoon.tw/tags/React-Native/"/>
    
      <category term="iOS" scheme="https://blog.dmoon.tw/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>React Native 初心者攻略 (OS X)</title>
    <link href="https://blog.dmoon.tw/react-native-101/"/>
    <id>https://blog.dmoon.tw/react-native-101/</id>
    <published>2016-04-18T16:05:03.000Z</published>
    <updated>2019-08-25T19:31:13.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/dnaYgtL.png" alt="React Native"></p>
<p>由於 React 的火熱程度，身邊許多朋友都開始接觸 React ，我也推薦他們玩玩看 React Native ，我覺得 React 的入門門檻有些其實和 React 本身無關，像是 Webpack, Babel 等等都多少在無形中增加了入門的難度，且有許多範例可能還使用了 ES6 語法，雖然不是必要，但可能會造成初學者混淆、失去信心，使學習過程更不順利。</p>
<p>然而 React Native 完全就是一個超棒的東西，只要跟著官網的教學就可以很簡單的開始使用 React 撰寫跨平台的 App，不僅內建支援 ES6 ，還有 Live Reload , Hot Reloading 等強大功能, 甚至能在 Chrome 中 debug ，這些React Native 統統幫你包好了，省去了原先我們在 web 專案開發需要自行加入 webpack, babel 等等的處理過程。</p>
<a id="more"></a>

<h2 id="環境建立"><a href="#環境建立" class="headerlink" title="環境建立"></a>環境建立</h2><p>相關環境安裝的部分跟著 <a href="http://reactnative.cn/docs/0.23/getting-started.html#环境需求" target="_blank" rel="external"><strong>官網的詳細指示</strong> (別擔心這裡有中文版) </a>操作就可以了，這部分就不多敘述</p>
<h2 id="建立RN專案"><a href="#建立RN專案" class="headerlink" title="建立RN專案"></a>建立RN專案</h2><pre><code>$ npm install -g react-native-cli
$ react-native init AwesomeProject</code></pre><h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="環境準備"></a>環境準備</h2><p>安裝 Xcode 即可</p>
<h2 id="專案開發"><a href="#專案開發" class="headerlink" title="專案開發"></a>專案開發</h2><p>有兩種方法</p>
<p>第一種是使用 Xcode ：</p>
<blockquote>
<p>開啟專案目錄下的 <code>/ios/AwesomeProject.xcodeproj</code> （應該會以 Xcode 開啟）, 按左上角的播放圖示按鈕就會自動開啟 iPhone 模擬器和 Packager server ，並把專案 build 成 App 到模擬器中。</p>
</blockquote>
<p>另一種是開啟 terminal 切換到專案目錄</p>
<blockquote>
<p><code>$ react-native run-ios</code></p>
<p>這個指令可以不用開啟 Xcode 做和上面同樣的事情，一個指令解決，非常簡潔</p>
</blockquote>
<p>接著你就可以開始編輯專案目錄下的 <code>index.ios.js</code> 開始開發你的專案。</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>在模擬器的 RN App 中你可以用快捷鍵 <code>cmd+D</code> 打開開發 Menu，這邊可以設定 Debug in Chrome, Live Reload, Hot Reloading 等等功能。</p>
<p>若需要手動刷新可以使用熱鍵 <code>cmd+R</code></p>
<p>另外，如果你有實體 Apple 裝置的話，也能夠直接在實體裝置上測試、開發</p>
<ol>
<li><p>將 Apple 裝置用USB線連接到電腦，並和電腦連接同一個 wifi</p>
</li>
<li><p>將專案用 Xcode 開啟（上面的第一種方法）</p>
</li>
<li><p>在 Xcode 左上角播放圖示的右方應該可以看到 寫著 Apple 裝置的選項，點按後選到自己的實體裝置</p>
</li>
<li><p>打開 Xcode 左邊檔案管理的導覽列 Tree View，找到 <code>AwesomeProject/AppDelegate.m</code> 這個檔案打開來
可以在裡面找到這段，相信看到註解大家應該都知道要怎麼做了，把 localhost 換成電腦的 ip 就可以了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* To run on device, change `localhost` to the IP address of your computer</span><br><span class="line">* (you can get this by typing `ifconfig` into the terminal and selecting the</span><br><span class="line">* `inet` value under `en0:`) and make sure your computer and iOS device are</span><br><span class="line">* on the same Wi-Fi network.</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</span><br></pre></td></tr></table></figure>
</li>
<li><p>按下 Xcode 左上角的播放鍵開始 Run 囉</p>
</li>
</ol>
<h1 id="Android-環境準備"><a href="#Android-環境準備" class="headerlink" title="Android 環境準備"></a>Android 環境準備</h1><p>由於目前我主要都是在 iOS 上開發， Android 部分還沒有很了解，如果有漏掉什麼還請各位大大提醒</p>
<p>Android 在 OS X 上的環境準備相對 iOS 來說稍微麻煩一點，但也不難
細心按照官方指示應該就能成功囉</p>
<p><a href="http://reactnative.cn/docs/0.23/android-setup.html#content" target="_blank" rel="external">參考這裡</a></p>
<h2 id="開發準備"><a href="#開發準備" class="headerlink" title="開發準備"></a>開發準備</h2><p>安裝完 Android SDK 和 Genymotion 之後</p>
<p>先打開 Genymotion 創建一個模擬器啟動</p>
<p>接著開啟 terminal 切到專案目錄下</p>
<p><code>$ react-native run-android</code></p>
<p>然後就可以編輯 <code>index.android.js</code> 開始開發了</p>
<p>在模擬器中按下 menu 按鈕可以打開開發 Menu ，這邊可以設定 Debug in Chrome, Live Reload, Hot Reloading 等等功能。</p>
<h1 id="如何使用別人寫好的-library-Package"><a href="#如何使用別人寫好的-library-Package" class="headerlink" title="如何使用別人寫好的 library, Package"></a>如何使用別人寫好的 library, Package</h1><p>我的同事 yaode 寫了一篇詳細完整的教學文章
大家可以參考看看</p>
<p><a href="http://trunk-studio.com/blog/react-native-how-to-use-component/" target="_blank" rel="external">http://trunk-studio.com/blog/react-native-how-to-use-component/</a></p>
<p>記得有用到文章內的方法 link library 的話，是需要重新 build App 到模擬器才能正常運作的喔！（run-ios / run-android）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/dnaYgtL.png&quot; alt=&quot;React Native&quot;&gt;&lt;/p&gt;
&lt;p&gt;由於 React 的火熱程度，身邊許多朋友都開始接觸 React ，我也推薦他們玩玩看 React Native ，我覺得 React 的入門門檻有些其實和 React 本身無關，像是 Webpack, Babel 等等都多少在無形中增加了入門的難度，且有許多範例可能還使用了 ES6 語法，雖然不是必要，但可能會造成初學者混淆、失去信心，使學習過程更不順利。&lt;/p&gt;
&lt;p&gt;然而 React Native 完全就是一個超棒的東西，只要跟著官網的教學就可以很簡單的開始使用 React 撰寫跨平台的 App，不僅內建支援 ES6 ，還有 Live Reload , Hot Reloading 等強大功能, 甚至能在 Chrome 中 debug ，這些React Native 統統幫你包好了，省去了原先我們在 web 專案開發需要自行加入 webpack, babel 等等的處理過程。&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="https://blog.dmoon.tw/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://blog.dmoon.tw/tags/React-Native/"/>
    
      <category term="Android" scheme="https://blog.dmoon.tw/tags/Android/"/>
    
      <category term="iOS" scheme="https://blog.dmoon.tw/tags/iOS/"/>
    
      <category term="React" scheme="https://blog.dmoon.tw/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React Native with Socket.io - error: evaluting &#39;navigator.userAgent.match&#39;</title>
    <link href="https://blog.dmoon.tw/react-native-with-socketIO/"/>
    <id>https://blog.dmoon.tw/react-native-with-socketIO/</id>
    <published>2016-03-25T10:53:20.000Z</published>
    <updated>2019-08-25T19:31:24.848Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在處理為 React Native 加上 聊天室的功能，首先遇到的問題就是串接 Socket ，要在 RN 上使用 socket 需要安裝 <a href="https://github.com/socketio/socket.io-client" target="_blank" rel="external">socket.io-client</a>，安裝之後 import socket.io-client/socket.io 時，遇到了這個 error </p>
<p><em>undefined is not an object (evaluting &#39;navigator.userAgent.match&#39;)</em></p>
<a id="more"></a>

<p>找了一下解決方法
發現這個套件不能用 import ，必需用 require
另外需要 assign window.navigator.userAgent</p>
<p>正確設定方法如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.navigator.userAgent = <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io-client/socket.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">'ws://'</span>, &#123; <span class="attr">jsonp</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>#Reference</p>
<p><a href="http://browniefed.com/blog/2015/05/16/react-native-and-socket-dot-io/" target="_blank" rel="external">http://browniefed.com/blog/2015/05/16/react-native-and-socket-dot-io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天在處理為 React Native 加上 聊天室的功能，首先遇到的問題就是串接 Socket ，要在 RN 上使用 socket 需要安裝 &lt;a href=&quot;https://github.com/socketio/socket.io-client&quot;&gt;socket.io-client&lt;/a&gt;，安裝之後 import socket.io-client/socket.io 時，遇到了這個 error &lt;/p&gt;
&lt;p&gt;&lt;em&gt;undefined is not an object (evaluting &amp;#39;navigator.userAgent.match&amp;#39;)&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React-Native" scheme="https://blog.dmoon.tw/categories/React-Native/"/>
    
    
      <category term="React-Native" scheme="https://blog.dmoon.tw/tags/React-Native/"/>
    
      <category term="Socket.io" scheme="https://blog.dmoon.tw/tags/Socket-io/"/>
    
  </entry>
  
  <entry>
    <title>ESLint React 心得 - extends Airbnb config</title>
    <link href="https://blog.dmoon.tw/eslint-react-extends-airbnb/"/>
    <id>https://blog.dmoon.tw/eslint-react-extends-airbnb/</id>
    <published>2016-03-23T04:54:43.000Z</published>
    <updated>2019-08-25T19:26:57.736Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/KgEwDSPFlRq08oUvZD6yr_VHLTdP3E7YJp4M9CxiZ7jmyKbahUleLusWuoaq2fsdYiW71mhX5p-WnnRhqcvog-xWs-UpCEOj4X1Y-vZYE7pCfSY4nbLyuR69wTpFBFkgFZPJY7Q7Uzuxky5QjoF0rMO6_2bvtYqzNjZow_-mnQKk5tBG2MQtvQkWRXC_XrPsIX3KVbwTER0ZUYZTsAV4LMDpm5_WrEBZ6E0vRfIo6BYqcAi5tqmsKvwqKZSvwWUAPD6Bj2x7U4cjwzv9q7EgeRr4j47gYypVmGt3-9wO7_oCNGQCdyzFvHa__3J9d7zAfrgLnDJW65rZJy15He-BC9_2PkUaBMnS_BHZIeLhL3HIwwXQOmRe4WZBkRaCeF2X_g1QgZCQCyPEPojiXOTqHTPJGL-RUuK5pAriwWNRKe6wUVCDz5XZ0U3hFg7wJNFITPEqRoIcMx9tELrZmQfouTScjCa_KrdsSdE5-i7-oYUKyTV5iwtZW0-jAX7ZISy9itZnHDO3HT8jRk47gDyj_aOmdGfycgBYWFYvFP86NCmp4KbUHT4z6-FnISxzAnLp-3eE=w1237-h195-no" alt="ESLint"></p>
<p>之前一直沒有嘗試過 JSHint、ESLint ，但隨著合作開發的人數越來越多，程式碼的風格和規範問題就更加明顯，加上最近看了聖經 <code>Clean Code</code> ，覺得寫出乾淨的程式碼真的很重要，剛好爬文發現有人推薦 Airbnb 釋出的 ESLint config 來做 js 和 React.js 規範，所以就決定來嘗試看看！</p>
<p>首先我要推薦 <a href="https://github.com/yannickcr/eslint-plugin-react" target="_blank" rel="external">eslint-plugin-react</a> 這個套件，這套件除了規範 React 的一些寫法，重要的是他還有寫 rules 的文件，告訴你為什麼建議這樣寫，只要把 eslint 上出現的錯誤訊息，拿去 google 就會找到 github 上用 markdown 寫的相關說明，跟著寫就有種 Level Up 的感覺，實在受益匪淺！</p>
<a id="more"></a>

<p>#Setup</p>
<p>安裝方法很簡單</p>
<p>先使用 npm 安裝 eslint 、 eslint-plugin-react、eslint-config-airbnb</p>
<blockquote>
<p>npm install --save-dev eslint eslint-plugin-react eslint-config-airbnb</p>
</blockquote>
<p>安裝後可以利用指令 init  <code>.eslintrc.js</code></p>
<blockquote>
<p>eslint —init</p>
</blockquote>
<p>透過 .eslintrc.js 這個檔案可以編輯 eslint 的規則</p>
<p>加入 extends airbnb 和 react plugin 就可以了</p>
<p>因為我有使用 es6 語法 所以需要多一個 babel 當 parser</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .eslintrc.js */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">"extends"</span>: <span class="string">"airbnb"</span>,</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        <span class="string">"react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">    <span class="string">"rules"</span>: &#123;</span><br><span class="line">      <span class="string">"strict"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/KgEwDSPFlRq08oUvZD6yr_VHLTdP3E7YJp4M9CxiZ7jmyKbahUleLusWuoaq2fsdYiW71mhX5p-WnnRhqcvog-xWs-UpCEOj4X1Y-vZYE7pCfSY4nbLyuR69wTpFBFkgFZPJY7Q7Uzuxky5QjoF0rMO6_2bvtYqzNjZow_-mnQKk5tBG2MQtvQkWRXC_XrPsIX3KVbwTER0ZUYZTsAV4LMDpm5_WrEBZ6E0vRfIo6BYqcAi5tqmsKvwqKZSvwWUAPD6Bj2x7U4cjwzv9q7EgeRr4j47gYypVmGt3-9wO7_oCNGQCdyzFvHa__3J9d7zAfrgLnDJW65rZJy15He-BC9_2PkUaBMnS_BHZIeLhL3HIwwXQOmRe4WZBkRaCeF2X_g1QgZCQCyPEPojiXOTqHTPJGL-RUuK5pAriwWNRKe6wUVCDz5XZ0U3hFg7wJNFITPEqRoIcMx9tELrZmQfouTScjCa_KrdsSdE5-i7-oYUKyTV5iwtZW0-jAX7ZISy9itZnHDO3HT8jRk47gDyj_aOmdGfycgBYWFYvFP86NCmp4KbUHT4z6-FnISxzAnLp-3eE=w1237-h195-no&quot; alt=&quot;ESLint&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前一直沒有嘗試過 JSHint、ESLint ，但隨著合作開發的人數越來越多，程式碼的風格和規範問題就更加明顯，加上最近看了聖經 &lt;code&gt;Clean Code&lt;/code&gt; ，覺得寫出乾淨的程式碼真的很重要，剛好爬文發現有人推薦 Airbnb 釋出的 ESLint config 來做 js 和 React.js 規範，所以就決定來嘗試看看！&lt;/p&gt;
&lt;p&gt;首先我要推薦 &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; 這個套件，這套件除了規範 React 的一些寫法，重要的是他還有寫 rules 的文件，告訴你為什麼建議這樣寫，只要把 eslint 上出現的錯誤訊息，拿去 google 就會找到 github 上用 markdown 寫的相關說明，跟著寫就有種 Level Up 的感覺，實在受益匪淺！&lt;/p&gt;
    
    </summary>
    
      <category term="DevTools" scheme="https://blog.dmoon.tw/categories/DevTools/"/>
    
    
      <category term="ESLint" scheme="https://blog.dmoon.tw/tags/ESLint/"/>
    
      <category term="React.js" scheme="https://blog.dmoon.tw/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>koa production cache 設定 - koa-static-cache</title>
    <link href="https://blog.dmoon.tw/koa-production-cache/"/>
    <id>https://blog.dmoon.tw/koa-production-cache/</id>
    <published>2016-03-19T02:07:46.000Z</published>
    <updated>2019-08-25T19:26:57.748Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/ehH3I28TQSBMOxkYzQ_Yp2Z9kXlDYbX-v22jH8BRXZ5bUC8PYpShgwBQP42-PKZ77vx0bn1eRsz3yrr_gIaEaKqeA_4Mt7WGd_YGXT3B40haq311NgEkP2K98NJMoj7J1-gwvEVbBPnyNO53PEFazJAZT6XMcYdnf_VNZ3NqVbPq3dgmgR8LMi2PIzdCqK0F_RWMedcl1RLfTbqxBugRbNcr38oiQ82yr5eZGAC2Chcni09MCtYdhHINoIzl-3cVh8M-K8rTpAAa3YwHwXrjUgTf4ZRVqC8aQnpr8RbCb2kboVZ6AbcVLwv1dz1LeCjo8pVEXEAqCBbxi4I3hUzfq-BpWJPmSRIqq55KPyKgXJeU90H-Aqkj0Yg0qe8zYEhd-vL_6nyqcpE7jT83VyLKStI6dsaA_LA72KqbvTuDRO8ABONlYOuQrG2Qsvxjm0A6d9qVRyCci1iD7q1c1ZhQ_xKfNgSXhnrZynFMoMaWhBSsdPVkbj7Jk_1nTnirxofc5nJOJphRMD2pwbBrSY4B-2uNhv0l0qpa5eI5LB6AvBjc4pPeXEq-ozZO06deNMj0tRUO=w1585-h712-no" alt="Koa.js"></p>
<p>之前在設定 Koa 的 cache 時，有點小卡關，所以記錄一下</p>
<p>我使用的 Koa 版本是 2.0.0</p>
<p>搭配處理 cache 的套件 是 <a href="https://github.com/koajs/static-cache" target="_blank" rel="external">koa-static-cache</a></p>
<a id="more"></a>

<p>官方 readme 上面的範例用法長這樣</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(staticCache(path.join(__dirname, <span class="string">'public'</span>), &#123;</span><br><span class="line">  maxAge: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p>因為使用 Koa 2.0 的關係，需要 <a href="https://github.com/koajs/convert" target="_blank" rel="external">koa-convert</a> 套件 convert 還沒更新支援 Koa 2.0 的套件，才能使用</p>
<p>所以我改成這樣</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(convert(staticCache(path.join(__dirname, <span class="string">'public'</span>), &#123;</span><br><span class="line">  maxAge: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">&#125;)))</span><br></pre></td></tr></table></figure>

<p>不過卻沒成功</p>
<p>後來看了別人的 Sample 才知道 StaticCache 後，還需要 <a href="https://github.com/koajs/mount" target="_blank" rel="external">mount</a> 到 route 上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(convert(mount(<span class="string">'/public/assets/js'</span>, staticCache(path.join(__dirname, <span class="string">'../public/assets/js/'</span>), &#123;<span class="attr">maxAge</span>: <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>&#125;))));</span><br></pre></td></tr></table></figure>

<p>最後改成這樣終於成功啦！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/ehH3I28TQSBMOxkYzQ_Yp2Z9kXlDYbX-v22jH8BRXZ5bUC8PYpShgwBQP42-PKZ77vx0bn1eRsz3yrr_gIaEaKqeA_4Mt7WGd_YGXT3B40haq311NgEkP2K98NJMoj7J1-gwvEVbBPnyNO53PEFazJAZT6XMcYdnf_VNZ3NqVbPq3dgmgR8LMi2PIzdCqK0F_RWMedcl1RLfTbqxBugRbNcr38oiQ82yr5eZGAC2Chcni09MCtYdhHINoIzl-3cVh8M-K8rTpAAa3YwHwXrjUgTf4ZRVqC8aQnpr8RbCb2kboVZ6AbcVLwv1dz1LeCjo8pVEXEAqCBbxi4I3hUzfq-BpWJPmSRIqq55KPyKgXJeU90H-Aqkj0Yg0qe8zYEhd-vL_6nyqcpE7jT83VyLKStI6dsaA_LA72KqbvTuDRO8ABONlYOuQrG2Qsvxjm0A6d9qVRyCci1iD7q1c1ZhQ_xKfNgSXhnrZynFMoMaWhBSsdPVkbj7Jk_1nTnirxofc5nJOJphRMD2pwbBrSY4B-2uNhv0l0qpa5eI5LB6AvBjc4pPeXEq-ozZO06deNMj0tRUO=w1585-h712-no&quot; alt=&quot;Koa.js&quot;&gt;&lt;/p&gt;
&lt;p&gt;之前在設定 Koa 的 cache 時，有點小卡關，所以記錄一下&lt;/p&gt;
&lt;p&gt;我使用的 Koa 版本是 2.0.0&lt;/p&gt;
&lt;p&gt;搭配處理 cache 的套件 是 &lt;a href=&quot;https://github.com/koajs/static-cache&quot;&gt;koa-static-cache&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="https://blog.dmoon.tw/categories/Node-js/"/>
    
    
      <category term="Koa" scheme="https://blog.dmoon.tw/tags/Koa/"/>
    
      <category term="Production" scheme="https://blog.dmoon.tw/tags/Production/"/>
    
  </entry>
  
  <entry>
    <title>GMT vs UTC 差異，Linux Etc/GMT 為何與現實時區相反</title>
    <link href="https://blog.dmoon.tw/GWT-vs-UTC-diff-and-Etc-GWT-reverse-timezone/"/>
    <id>https://blog.dmoon.tw/GWT-vs-UTC-diff-and-Etc-GWT-reverse-timezone/</id>
    <published>2016-03-08T13:22:03.000Z</published>
    <updated>2019-08-25T19:26:57.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GMT-amp-UTC"><a href="#GMT-amp-UTC" class="headerlink" title="GMT &amp; UTC"></a>GMT &amp; UTC</h2><p>首先來說 GMT 和 UTC 是什麼，有什麼差別</p>
<blockquote>
<p>GMT：格林威治標準時間</p>
<p>UTC：世界協調時間</p>
</blockquote>
<p>他們都是世界標準時間，而 UTC 的算法更為嚴謹，所以比 GMT 更為精準，不過兩者的差異是極小的，所以基本上時間是可以看作相同的</p>
<a id="more"></a>

<h2 id="Linux-Etc-GMT-時區為何正負顛倒"><a href="#Linux-Etc-GMT-時區為何正負顛倒" class="headerlink" title="Linux Etc/GMT 時區為何正負顛倒"></a>Linux Etc/GMT 時區為何正負顛倒</h2><p>當你使用 Linux 設定時區時 ，若是選用 Etc 底下的 GMT 時區，可能會發現設定的結果與你預想的不同，當你想設定台北的時區 （GMT＋8) ，但設定完後，系統時間卻是 -8 的時區，和台北時間相差 16 小時，原因是因為 Etc 底下的 GMT 時區是以 <code>格林威治</code> 以西為正，以東為負，剛好與我們現實生活的認知相反</p>
<p>而原因只是因為當初 Unix 多為西方人使用，便以西為正</p>
<p>因此在設定的時候需要選擇正負相反的選項</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://lemonlatte.logdown.com/tags/tzdata" target="_blank" rel="external">http://lemonlatte.logdown.com/tags/tzdata</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GMT-amp-UTC&quot;&gt;&lt;a href=&quot;#GMT-amp-UTC&quot; class=&quot;headerlink&quot; title=&quot;GMT &amp;amp; UTC&quot;&gt;&lt;/a&gt;GMT &amp;amp; UTC&lt;/h2&gt;&lt;p&gt;首先來說 GMT 和 UTC 是什麼，有什麼差別&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GMT：格林威治標準時間&lt;/p&gt;
&lt;p&gt;UTC：世界協調時間&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他們都是世界標準時間，而 UTC 的算法更為嚴謹，所以比 GMT 更為精準，不過兩者的差異是極小的，所以基本上時間是可以看作相同的&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.dmoon.tw/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.dmoon.tw/tags/Linux/"/>
    
      <category term="Timezone" scheme="https://blog.dmoon.tw/tags/Timezone/"/>
    
      <category term="GMT" scheme="https://blog.dmoon.tw/tags/GMT/"/>
    
  </entry>
  
  <entry>
    <title>Chromecast Audio 變身無線音響</title>
    <link href="https://blog.dmoon.tw/Chromecast-Audio/"/>
    <id>https://blog.dmoon.tw/Chromecast-Audio/</id>
    <published>2016-02-28T16:50:21.000Z</published>
    <updated>2019-08-25T19:30:16.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/7UgD5xli6K2rYKoprrlVPKU1w-OIZoiSJVR3CApp97IKGPtgGr952C6v29JWbIVEQelN3_enMvypP_pJkmGHwwEwql32tk_G8ARvt5SaNS9zrQUCyqXyyWhXyENCG9usX2o1jQLFTj6vYGSKYSrbN4beQ6ixiSS2qcIVR0v1Hw9v84GbEQAp5pW8tggzKYId-Lh4HFrdPthaOu9txYmOAcFQaDyD5IONCV1BBTuD9pSAHwMiThMzVTxCKWnBRl4HfEgmBE_U7ZT1cPzRhOaKjGHB0BWnqCIl8LuUkaXCS8GQ14gS68U3xay4SQBT60pne0sbpPQq5jQqZHeAZaJzSK4HjrVg5lxvgzjinCLBUbpdBbEw8qNYSsBXbg_y0BQvyCviLe785jQO7HT-GTb0up5B3hIWAxJACNfh2GmHhsdLy-g53oF9zD2bc_97GRh3VvJ1pJHWecwaXuulNa4przEf6lpVyBi4qXyhKBTBgJ4sqk0dpyyFOFlSqW1hXgLYcr0d8WSRMwlwuG-lyLHD1sIKkuBbEJh24Ek_ROOI-L6bJEBNn06KbJu57FwJxqfO4M8S=s1024-no" alt="Chromecast Audio"></p>
<p><a href="https://www.google.com/chromecast/speakers/" target="_blank" rel="external"><strong>Chromecast Audio</strong></a> 去年發表的時候就很想買了 沒想到台灣遲遲沒有開賣</p>
<p>感謝好朋友幫我從美國帶回來，可以提前嘗鮮！</p>
<a id="more"></a>

<p>總共有兩個接口</p>
<blockquote>
<ol>
<li>3.5mm 音源 output： 用來連接音響的</li>
<li>micro USB：電源 （有附線材和充電器）</li>
</ol>
</blockquote>
<h1 id="設置"><a href="#設置" class="headerlink" title="設置"></a>設置</h1><p>安裝方法和 Chromecast 應該是一樣的</p>
<blockquote>
<ol>
<li>使用手機或平版到 App Store 搜尋下載官方的 Chromecast App ，打開後就可以開始設定裝置</li>
<li>幫 Chromecast Audio 命名 （建議不要包含特殊字元或空白，純英數佳）</li>
<li>填入家中 WiFi 帳號密碼 （讓Chromecast 能夠連上加中的 WiFi ， 之後就可以透過裝置連接家中 WiFi 來播放</li>
</ol>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Spotify 有支援能夠在 App 內選擇要在哪個裝置上播放，相信有用 Spotify 的人都知道，只要連接到 Chromecast Audio 的相同 Wifi 上，在播放裝置列表就能看見 Chromecast Audio 了</p>
<h1 id="Mac-amp-Windows-投放"><a href="#Mac-amp-Windows-投放" class="headerlink" title="Mac &amp; Windows 投放"></a>Mac &amp; Windows 投放</h1><p>當然只在手機上使用是絕對不夠方便的，如果用電腦到一半還要去操作手機就太 low 了，好在有廣大的開發者，提供了開源的桌面應用程式</p>
<blockquote>
<ul>
<li>OS X: <a href="https://github.com/andresgottlieb/soundcast" target="_blank" rel="external">soundcast github repo</a>  如果 chromecast 名稱含有空白或特殊字元可能搜尋不到</li>
<li>Windows: <a href="https://github.com/acidhax/chromecast-audio-stream" target="_blank" rel="external">chromecast-audio-stream github repo</a></li>
</ul>
</blockquote>
<p>感恩開源，讚嘆開源</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/7UgD5xli6K2rYKoprrlVPKU1w-OIZoiSJVR3CApp97IKGPtgGr952C6v29JWbIVEQelN3_enMvypP_pJkmGHwwEwql32tk_G8ARvt5SaNS9zrQUCyqXyyWhXyENCG9usX2o1jQLFTj6vYGSKYSrbN4beQ6ixiSS2qcIVR0v1Hw9v84GbEQAp5pW8tggzKYId-Lh4HFrdPthaOu9txYmOAcFQaDyD5IONCV1BBTuD9pSAHwMiThMzVTxCKWnBRl4HfEgmBE_U7ZT1cPzRhOaKjGHB0BWnqCIl8LuUkaXCS8GQ14gS68U3xay4SQBT60pne0sbpPQq5jQqZHeAZaJzSK4HjrVg5lxvgzjinCLBUbpdBbEw8qNYSsBXbg_y0BQvyCviLe785jQO7HT-GTb0up5B3hIWAxJACNfh2GmHhsdLy-g53oF9zD2bc_97GRh3VvJ1pJHWecwaXuulNa4przEf6lpVyBi4qXyhKBTBgJ4sqk0dpyyFOFlSqW1hXgLYcr0d8WSRMwlwuG-lyLHD1sIKkuBbEJh24Ek_ROOI-L6bJEBNn06KbJu57FwJxqfO4M8S=s1024-no&quot; alt=&quot;Chromecast Audio&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/chromecast/speakers/&quot;&gt;&lt;strong&gt;Chromecast Audio&lt;/strong&gt;&lt;/a&gt; 去年發表的時候就很想買了 沒想到台灣遲遲沒有開賣&lt;/p&gt;
&lt;p&gt;感謝好朋友幫我從美國帶回來，可以提前嘗鮮！&lt;/p&gt;
    
    </summary>
    
      <category term="科技產品" scheme="https://blog.dmoon.tw/categories/%E7%A7%91%E6%8A%80%E7%94%A2%E5%93%81/"/>
    
    
      <category term="Chromecast" scheme="https://blog.dmoon.tw/tags/Chromecast/"/>
    
  </entry>
  
  <entry>
    <title>Webpack ProvidePlugin : 不用再 import React 了</title>
    <link href="https://blog.dmoon.tw/free-to-import-react/"/>
    <id>https://blog.dmoon.tw/free-to-import-react/</id>
    <published>2016-02-22T16:35:32.000Z</published>
    <updated>2019-08-25T19:31:33.113Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>從前可能需要每個檔案都自己人工 import jquery、react</p>
<p>現在透過 webpack 的 ProvidePlugin 可以幫你將 dependency 自動 import</p>
<p>不只是 react , jquery  或其他 lib 都可以使用</p>
<a id="more"></a>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>把 ProvidePlugin 加到 webpack.config.js 的 plugins</p>
<p>example</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">    <span class="string">'React'</span>: <span class="string">'react'</span>,</span><br><span class="line">          $: <span class="string">"jquery"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>原理是 webpack 在 build bundle.js 時，如果發現 &#39;React&#39; 、 $ ，就會自動去 import 設定中對應的 dependency</p>
<p>例如 使用 React 時</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">React.createClass()</span><br></pre></td></tr></table></figure>

<p>就會自動去 import react</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://webpack.github.io/docs/list-of-plugins.html#provideplugin" target="_blank" rel="external">官方文件</a></p>
<p><a href="https://medium.com/@thejenniekim/never-import-react-from-react-again-thanks-to-webpack-s-provideplugin-69e7feb69e#.o6x19nno8" target="_blank" rel="external">https://medium.com/@thejenniekim/never-import-react-from-react-again-thanks-to-webpack-s-provideplugin-69e7feb69e#.o6x19nno8</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;從前可能需要每個檔案都自己人工 import jquery、react&lt;/p&gt;
&lt;p&gt;現在透過 webpack 的 ProvidePlugin 可以幫你將 dependency 自動 import&lt;/p&gt;
&lt;p&gt;不只是 react , jquery  或其他 lib 都可以使用&lt;/p&gt;
    
    </summary>
    
      <category term="Front-end Tool" scheme="https://blog.dmoon.tw/categories/Front-end-Tool/"/>
    
    
      <category term="webpack" scheme="https://blog.dmoon.tw/tags/webpack/"/>
    
  </entry>
  
</feed>
